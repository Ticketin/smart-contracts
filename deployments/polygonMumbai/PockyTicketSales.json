{
  "address": "0xA48b29591142A2ca83b77c1d710fd9043C9C77A3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract PockyCollections",
          "name": "_collections",
          "type": "address"
        },
        {
          "internalType": "contract Ticket",
          "name": "_ticket",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "collections",
      "outputs": [
        {
          "internalType": "contract PockyCollections",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "purchase",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ticket",
      "outputs": [
        {
          "internalType": "contract Ticket",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "withdrawCollectionRevenue",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5f50078b61ebc17c2cd9d43f8e3e70316cbb7170ab127ab35758d0c4b1b5a784",
  "receipt": {
    "to": null,
    "from": "0x63390E2c9E21dAEB5CA74b0B9CAf1d4fd77027dF",
    "contractAddress": "0xA48b29591142A2ca83b77c1d710fd9043C9C77A3",
    "transactionIndex": 2,
    "gasUsed": "863541",
    "logsBloom": "0x
    "blockHash": "0x24524c5f8a3fbe51078e313d03283eece57375890eb7b310e7dfbd3a7b9753f9",
    "transactionHash": "0x5f50078b61ebc17c2cd9d43f8e3e70316cbb7170ab127ab35758d0c4b1b5a784",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 36598983,
        "transactionHash": "0x5f50078b61ebc17c2cd9d43f8e3e70316cbb7170ab127ab35758d0c4b1b5a784",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000063390e2c9e21daeb5ca74b0b9caf1d4fd77027df",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000934286ad6a2b000000000000000000000000000000000000000000000000580c4fc49d9d01200000000000000000000000000000000000000000000000a950975ffd195f936c700000000000000000000000000000000000000000000000580bbc8216ef96f50000000000000000000000000000000000000000000000a95097f33fa00cfd977",
        "logIndex": 10,
        "blockHash": "0x24524c5f8a3fbe51078e313d03283eece57375890eb7b310e7dfbd3a7b9753f9"
      }
    ],
    "blockNumber": 36598983,
    "cumulativeGasUsed": "1292193",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa9f6E9B62A45216cdC67DB52BaE41269185d931B",
    "0x0f5568eBE7Ed064588dAbAe9DB07F882D207Af58"
  ],
  "numDeployments": 1,
  "solcInputHash": "df058e6789564aa6282e6bc6f34413ac",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract PockyCollections\",\"name\":\"_collections\",\"type\":\"address\"},{\"internalType\":\"contract Ticket\",\"name\":\"_ticket\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"contract PockyCollections\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"purchase\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ticket\",\"outputs\":[{\"internalType\":\"contract Ticket\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"withdrawCollectionRevenue\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Mints a new PockeyTicket dNFT as a user pays, and manages the revenue per collection.\",\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PockyTicketSales.sol\":\"PockyTicketSales\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.2) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: address zero is not a valid owner\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        require(owner != address(0), \\\"ERC721: invalid token ID\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        _requireMinted(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not token owner or approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        _requireMinted(tokenId);\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: caller is not token owner or approved\\\");\\n        _safeTransfer(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _ownerOf(tokenId) != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || isApprovedForAll(owner, spender) || getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId, 1);\\n\\n        // Check that tokenId was not minted by `_beforeTokenTransfer` hook\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        unchecked {\\n            // Will not overflow unless all 2**256 token ids are minted to the same owner.\\n            // Given that tokens are minted one by one, it is impossible in practice that\\n            // this ever happens. Might change if we allow batch minting.\\n            // The ERC fails to describe this case.\\n            _balances[to] += 1;\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n\\n        _afterTokenTransfer(address(0), to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId, 1);\\n\\n        // Update ownership in case tokenId was transferred by `_beforeTokenTransfer` hook\\n        owner = ERC721.ownerOf(tokenId);\\n\\n        // Clear approvals\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // Cannot overflow, as that would require more tokens to be burned/transferred\\n            // out than the owner initially received through minting and transferring in.\\n            _balances[owner] -= 1;\\n        }\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n\\n        _afterTokenTransfer(owner, address(0), tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId, 1);\\n\\n        // Check that tokenId was not transferred by `_beforeTokenTransfer` hook\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer from incorrect owner\\\");\\n\\n        // Clear approvals from the previous owner\\n        delete _tokenApprovals[tokenId];\\n\\n        unchecked {\\n            // `_balances[from]` cannot overflow for the same reason as described in `_burn`:\\n            // `from`'s balance is the number of token held, which is at least one before the current\\n            // transfer.\\n            // `_balances[to]` could overflow in the conditions described in `_mint`. That would require\\n            // all 2**256 token ids to be minted, which in practice is impossible.\\n            _balances[from] -= 1;\\n            _balances[to] += 1;\\n        }\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        _afterTokenTransfer(from, to, tokenId, 1);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(\\n        address owner,\\n        address operator,\\n        bool approved\\n    ) internal virtual {\\n        require(owner != operator, \\\"ERC721: approve to caller\\\");\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` has not been minted yet.\\n     */\\n    function _requireMinted(uint256 tokenId) internal view virtual {\\n        require(_exists(tokenId), \\\"ERC721: invalid token ID\\\");\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens will be transferred to `to`.\\n     * - When `from` is zero, the tokens will be minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens will be burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Hook that is called after any token transfer. This includes minting and burning. If {ERC721Consecutive} is\\n     * used, the hook may be called as part of a consecutive (batch) mint, as indicated by `batchSize` greater than 1.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s tokens were transferred to `to`.\\n     * - When `from` is zero, the tokens were minted for `to`.\\n     * - When `to` is zero, ``from``'s tokens were burned.\\n     * - `from` and `to` are never both zero.\\n     * - `batchSize` is non-zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _afterTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual {}\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * WARNING: Anyone calling this MUST ensure that the balances remain consistent with the ownership. The invariant\\n     * being that for any address `a` the value returned by `balanceOf(a)` must be equal to the number of tokens such\\n     * that `ownerOf(tokenId)` is `a`.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function __unsafe_increaseBalance(address account, uint256 amount) internal {\\n        _balances[account] += amount;\\n    }\\n}\\n\",\"keccak256\":\"0x1e854874c68bec05be100dc0092cb5fbbc71253d370ae98ddef248bbfc3fe118\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/extensions/ERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev See {ERC721-_beforeTokenTransfer}.\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 firstTokenId,\\n        uint256 batchSize\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, firstTokenId, batchSize);\\n\\n        if (batchSize > 1) {\\n            // Will only trigger during construction. Batch transferring (minting) is not available afterwards.\\n            revert(\\\"ERC721Enumerable: consecutive transfers not supported\\\");\\n        }\\n\\n        uint256 tokenId = firstTokenId;\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0xa8796bd16014cefb8c26449413981a49c510f92a98d6828494f5fd046223ced3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x75b829ff2f26c14355d1cba20e16fe7b29ca58eb5fef665ede48bc0f9c6c74b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/PockyCollections.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\\nimport {Base64} from 'base64-sol/base64.sol';\\nimport {TicketSVGRenderer} from './TicketSVGRenderer.sol';\\n\\n/**\\n * @dev A module manages the collection data (i.e. metadata shared across tickets for an event),\\n * and renders a OpenSea-compliant ERC721 metadata for each tokens.\\n * A metadata can be updated by Chainlink oracle (API Consumer), for example, for updating the event result.\\n *\\n * The frontend app should use it for serving available drops/collections.\\n */\\ncontract PockyCollections is AccessControl {\\n  /** @dev REGISTRAR_ROLE is admin user, who can register a collection. */\\n  bytes32 public constant REGISTRAR_ROLE = keccak256('REGISTRAR_ROLE');\\n\\n  /** @dev RESULT_ORACLE_ROLE is given to Chainlink Oracle, who can update the `eventResult` of a collection. */\\n  bytes32 public constant RESULT_ORACLE_ROLE = keccak256('RESULT_ORACLE_ROLE');\\n\\n  struct Collection {\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 basic information\\n    /** The event name. */\\n    string name;\\n    /** ticket price */\\n    uint256 priceInETH;\\n    /** the collection owner. only the owner can withdraw the revenue */\\n    address owner;\\n    /** the maximum count (mint cap) of tickets per a collection */\\n    uint256 maxSupply;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 date-related fields\\n    // NOTE: time-sensitive sections such as Now, Upcoming should be categorized in\\n    // the frontend by parsing startDate / endDate. Here are the cases:\\n    // - Now: startDate <= Date.now() < endDate\\n    // - Upcoming: Date.now() > startDate\\n    // - Past (hidden): Date.now() >= endDate\\n\\n    /** start date, in POSIX time (millis) */\\n    uint256 startDate;\\n    /** end date, in POSIX time (millis) */\\n    uint256 endDate;\\n    /** YYYYMMDD */\\n    string matchDate;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 metadata\\n\\n    TicketSVGMetadata ticketSvgMetadata;\\n    /** The summary of the location where the event held. shown in ticket image */\\n    string eventLocation;\\n    /** Multi-line description shown in the detail page */\\n    string description;\\n    /** Banner image URL. */\\n    string imageUrl;\\n    /** Should be listed in the top of the main page? */\\n    bool featured;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 result-related fields\\n    /** Whether the result is updated. */\\n    bool updated;\\n    /** The updated result (by Chainlink oracle) */\\n    OracleResult eventResult;\\n  }\\n\\n  struct TicketSVGMetadata {\\n    // home team info\\n    string homeTeamName;\\n    string homeTeamSymbol;\\n    string homeTeamLogo;\\n    string homeTeamColor;\\n    // away team info\\n    string awayTeamName;\\n    string awayTeamSymbol;\\n    string awayTeamLogo;\\n    string awayTeamColor;\\n    /** QR Code URL. `https://pocky.deno.dev/api/qrcode/${collectionId}` */\\n    string qrCodeUrl;\\n    /** Only the day of week, in uppercase. e.g. `\\\"WEDNESDAY,\\\"` */\\n    string dateLine1;\\n    /** rest of the date, in uppercase. e.g. `\\\"OCTOBER 20 PM 7:00\\\"` */\\n    string dateLine2;\\n    /** Only the first comma, in uppercase. e.g. `\\\"TD GARDEN,\\\"` */\\n    string locationLine1;\\n    /** rest of the date, in uppercase. e.g. `\\\"100 Legends Way, Boston, MA\\\"` */\\n    string locationLine2;\\n  }\\n\\n  struct OracleResult {\\n    string homeScore;\\n    string homeFGM;\\n    string homeFGP;\\n    string homeTPM;\\n    string homeTPP;\\n    string homeFTM;\\n    string homeFTP;\\n    string awayScore;\\n    string awayFGM;\\n    string awayFGP;\\n    string awayTPM;\\n    string awayTPP;\\n    string awayFTM;\\n    string awayFTP;\\n  }\\n\\n  Collection[] private _collections;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(REGISTRAR_ROLE, msg.sender);\\n    _setupRole(RESULT_ORACLE_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Registers a new collection. Should have {@link REGISTRAR_ROLE}.\\n   * @param collection The collection data.\\n   */\\n  function register(Collection calldata collection) external onlyRole(REGISTRAR_ROLE) {\\n    _collections.push(collection);\\n  }\\n\\n  /** @dev returns whether the collectionId exists. */\\n  function exists(uint256 collectionId) public view returns (bool) {\\n    return bytes(_collections[collectionId].name).length > 0;\\n  }\\n\\n  /** @dev returns the collection data for given ID. */\\n  function get(uint256 collectionId) external view returns (Collection memory) {\\n    require(exists(collectionId), 'collection does not exist');\\n    return _collections[collectionId];\\n  }\\n\\n  /**\\n   * @dev The entire collection data.\\n   * The frontend app should use this method for listing collections in the main page.\\n   */\\n  function list() external view returns (Collection[] memory) {\\n    return _collections;\\n  }\\n\\n  /**\\n   * @dev Updates a event result of a collection. Should have {@link RESULT_ORACLE_ROLE} (i.e. Oracle!)\\n   * @notice This function is called by Chainlink Oracle.\\n   * @param collectionId The collection you want to update\\n   * @param result The event result\\n   */\\n  function updateResult(uint256 collectionId, OracleResult calldata result) external onlyRole(RESULT_ORACLE_ROLE) {\\n    require(exists(collectionId), 'collection does not exist');\\n    _collections[collectionId].eventResult = result;\\n    _collections[collectionId].updated = true;\\n  }\\n\\n  /**\\n   * @dev Generates a OpenSea-compliant ERC721 metadata for a token.\\n   *\\n   * @param collectionId the collection ID\\n   */\\n  function constructTokenURIOf(uint256 collectionId) external view returns (string memory) {\\n    Collection storage collection = _collections[collectionId];\\n    string memory image = Base64.encode(bytes(TicketSVGRenderer.renderSVG(collection)));\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                collection.name,\\n                ' - Pocky dNFT Ticket\\\", \\\"description\\\":\\\"',\\n                collection.description,\\n                '\\\", \\\"animation_url\\\": \\\"https://pocky.deno.dev/render?svg=',\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function svgOf(uint256 collectionId) public view returns (string memory) {\\n    Collection storage collection = _collections[collectionId];\\n    return TicketSVGRenderer.renderSVG(collection);\\n  }\\n}\\n\",\"keccak256\":\"0xf8ae93e35b6dead8e2db0b09e19ed15d44f3e3af9d0cc4165c84f67c871cfc92\",\"license\":\"MIT\"},\"contracts/PockyTicket.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {ERC721Enumerable, ERC721, IERC721Metadata} from '@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol';\\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\\nimport {PockyCollections} from './PockyCollections.sol';\\n\\n/**\\n * @dev A ERC721 dNFT token contract for Pocky Ticket, powered by Chainlink.\\n * The NFT changes its metadata (i.e. SVG image) according to the event result.\\n */\\ncontract Ticket is ERC721Enumerable, AccessControl {\\n  string private constant TOKEN_NAME = 'Pocky Ticket';\\n  string private constant SYMBOL = 'POCKYTICKET';\\n\\n  bytes32 public constant MINTER_ROLE = keccak256('MINTER_ROLE');\\n\\n  /** @dev PockeyCollections contract, which is a module responsible for managing the dNFT metadata */\\n  PockyCollections public collections;\\n\\n  mapping(uint256 => uint256) public tokenIdToCollectionId;\\n  mapping(uint256 => uint256) private _totalSupplyPerCollectionId;\\n\\n  constructor(PockyCollections _collections) ERC721Enumerable() ERC721(TOKEN_NAME, SYMBOL) {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(MINTER_ROLE, msg.sender);\\n\\n    collections = _collections;\\n  }\\n\\n  /**\\n   * @dev Mints a new token.\\n   * @notice Should have called by an admin user having {@link MINTER_ROLE}.\\n   *\\n   * @param collectionId The collection ID of the token.\\n   * @param to The beneficiary address to receive the minted token.\\n   */\\n  function mint(uint256 collectionId, address to) external onlyRole(MINTER_ROLE) {\\n    PockyCollections.Collection memory collection = collections.get(collectionId);\\n    require(_totalSupplyPerCollectionId[collectionId] < collection.maxSupply, 'sold out');\\n\\n    uint256 tokenId = totalSupply() + 1;\\n    _mint(to, tokenId);\\n    tokenIdToCollectionId[tokenId] = collectionId;\\n    _totalSupplyPerCollectionId[collectionId] += 1;\\n  }\\n\\n  /**\\n   * @dev returns a dynamic NFT metadata of given token.\\n   *\\n   * The returned URI is an base64-encoded URI self-containing the metadata by itself,\\n   * not pointing any external URIs like IPFS.\\n   */\\n  function tokenURI(uint256 tokenId) public view override(ERC721) returns (string memory) {\\n    require(_exists(tokenId), 'URI query for nonexistent token');\\n    return collections.constructTokenURIOf(tokenIdToCollectionId[tokenId]);\\n  }\\n\\n  /** @dev returns the collection data of given token. */\\n  function collectionOf(uint256 tokenId) public view returns (PockyCollections.Collection memory) {\\n    require(_exists(tokenId), 'query for nonexistent token');\\n    return collections.get(tokenIdToCollectionId[tokenId]);\\n  }\\n\\n  /** @dev returns the total supply of the collection */\\n  function totalSupplyOfCollection(uint256 collectionId) public view returns (uint256) {\\n    return _totalSupplyPerCollectionId[collectionId];\\n  }\\n\\n  /** @dev See {IERC165-supportsInterface}. */\\n  function supportsInterface(\\n    bytes4 interfaceId\\n  ) public view virtual override(ERC721Enumerable, AccessControl) returns (bool) {\\n    return super.supportsInterface(interfaceId);\\n  }\\n}\\n\",\"keccak256\":\"0x3d9f659a4502530b13b503d454f1740d0d73fc5212c85538e2a86e115303f76f\",\"license\":\"MIT\"},\"contracts/PockyTicketSales.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PockyCollections} from './PockyCollections.sol';\\nimport {Ticket} from './PockyTicket.sol';\\n\\n/**\\n * @dev Mints a new PockeyTicket dNFT as a user pays, and manages the revenue per collection.\\n */\\ncontract PockyTicketSales {\\n  PockyCollections public collections;\\n  Ticket public ticket;\\n\\n  mapping(uint256 => uint256) private _balancePerCollectionId;\\n\\n  constructor(PockyCollections _collections, Ticket _ticket) {\\n    collections = _collections;\\n    ticket = _ticket;\\n  }\\n\\n  function purchase(uint256 collectionId) external payable {\\n    require(collections.exists(collectionId), 'collection does not exist');\\n    require(block.timestamp <= collections.get(collectionId).endDate / 1000, 'event has already ended');\\n    require(msg.value == collections.get(collectionId).priceInETH, 'invalid price');\\n\\n    ticket.mint(collectionId, msg.sender);\\n    _balancePerCollectionId[collectionId] += msg.value;\\n  }\\n\\n  function withdrawCollectionRevenue(uint256 collectionId) external {\\n    require(collections.exists(collectionId), 'collection does not exist');\\n    require(msg.sender == collections.get(collectionId).owner, 'only owner can withdraw');\\n\\n    uint256 balance = _balancePerCollectionId[collectionId];\\n    require(balance > 0, 'no balance');\\n\\n    _balancePerCollectionId[collectionId] = 0;\\n    payable(msg.sender).transfer(balance);\\n  }\\n}\\n\",\"keccak256\":\"0x9ddbcb5e470c4cba81bc1c9ee8edf3838abce2672f55c7674efcfbf903c97265\",\"license\":\"MIT\"},\"contracts/TicketSVGRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PockyCollections} from './PockyCollections.sol';\\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary TicketSVGRenderer {\\n  string public constant NBA_HEADER =\\n    '<svg width=\\\"848\\\" height=\\\"848\\\" viewBox=\\\"0 0 848 848\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><defs><style>@font-face { font-family: \\\"NBA\\\"; src: url(\\\"https://static.duckee.xyz/NBA-Pacers.woff2\\\"); }.ta { font: bold 80px Arial; fill: white; letter-spacing: -0.03em; }.ta2 { font-size: 18px; fill: black; } .ta3 { font-size: 24px; fill: black; } .tn { font: 47px NBA, sans-serif; letter-spacing: -0.03em; fill: white; }.tn2 { fill: #828282; font-size: 24px; } .tn3 { fill: #646464; font-size: 24px; }</style><pattern id=\\\"nbalogo\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#inba\\\" transform=\\\"scale(0.0026178 0.00152439)\\\" /></pattern><clipPath id=\\\"cb\\\"><rect width=\\\"848\\\" height=\\\"848\\\" fill=\\\"white\\\" /></clipPath><image id=\\\"inba\\\" width=\\\"382\\\" height=\\\"656\\\" xlink:href=\\\"https://static.duckee.xyz/nba.png\\\" /></defs><g clip-path=\\\"url(#cb)\\\"><path d=\\\"M24 0H535C535 17.6731 549.327 32 567 32V816C549.327 816 535 830.327 535 848H24V0Z\\\" fill=\\\"#F3F3F3\\\" /><path d=\\\"M16 0.5L239.5 0.5L239.5 847.5H16C7.43959 847.5 0.5 840.56 0.5 832L0.5 16C0.5 7.43957 7.43959 0.5 16 0.5Z\\\" fill=\\\"black\\\" stroke=\\\"#F5F5F5\\\" /><rect x=\\\"24\\\" y=\\\"494\\\" width=\\\"191\\\" height=\\\"328\\\" fill=\\\"url(#nbalogo)\\\" /><path d=\\\"M567 35L567 813\\\" stroke=\\\"#CECECE\\\" stroke-width=\\\"3\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"40 40\\\" /><path d=\\\"M599 -0.000976562C599 17.6721 584.673 31.999 567 31.999V815.999C584.673 815.999 599 830.326 599 847.999H832C840.837 847.999 848 840.836 848 831.999V15.999C848 7.16247 840.837 -0.000976562 832 -0.000976562H599Z\\\" fill=\\\"#F5F5F5\\\" /><line x1=\\\"567\\\" y1=\\\"283.999\\\" x2=\\\"848\\\" y2=\\\"283.999\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"708\\\" cy=\\\"284.999\\\" r=\\\"56\\\" transform=\\\"rotate(-90 708 284.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"704\\\" cy=\\\"455.999\\\" r=\\\"50\\\" transform=\\\"rotate(-90 704 455.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M693.239 602.009L693.172 602H693.104H599L599 494C599 433.801 647.801 385 708 385C768.199 385 817 433.801 817 494V602H722.896H722.828L722.761 602.009C717.935 602.662 713.007 603 708 603C702.993 603 698.065 602.662 693.239 602.009Z\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M722.761 -32.009L722.828 -32L722.896 -32L817 -32L817 76C817 136.199 768.199 185 708 185C647.801 185 599 136.199 599 76L599 -32L693.104 -32L693.172 -32L693.239 -32.009C698.065 -32.6625 702.993 -33 708 -33C713.007 -33 717.935 -32.6625 722.761 -32.009Z\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><rect x=\\\"654\\\" y=\\\"601.999\\\" width=\\\"145\\\" height=\\\"100\\\" transform=\\\"rotate(-90 654 601.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><rect x=\\\"654\\\" y=\\\"118.999\\\" width=\\\"118\\\" height=\\\"100\\\" transform=\\\"rotate(-90 654 118.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"704\\\" cy=\\\"113.999\\\" r=\\\"50\\\" transform=\\\"rotate(90 704 113.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M567 35L567 813\\\" stroke=\\\"#CECECE\\\" stroke-width=\\\"3\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"40 40\\\" /><rect x=\\\"771\\\" width=\\\"46\\\" height=\\\"240\\\" fill=\\\"#E73325\\\" /><rect x=\\\"714\\\" width=\\\"46\\\" height=\\\"198\\\" fill=\\\"#E73325\\\"/><text transform=\\\"translate(718 189) rotate(-90)\\\" class=\\\"tn\\\"><tspan x=\\\"0.430511\\\" y=\\\"37.694\\\">2023 NBA</tspan></text><text transform=\\\"translate(775 231) rotate(-90)\\\" class=\\\"tn\\\"><tspan x=\\\"0.565628\\\" y=\\\"37.694\\\">GAME TICKET</tspan></text>';\\n  string public constant NBA_FOOTER = '</g></svg>';\\n\\n  function renderSVG(PockyCollections.Collection memory collection) public pure returns (string memory svg) {\\n    if (collection.updated) {\\n      return renderResultNbaTicket(collection);\\n    }\\n    return renderUpcomingNbaTicket(collection);\\n  }\\n\\n  function renderUpcomingNbaTicket(\\n    PockyCollections.Collection memory collection\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          NBA_HEADER,\\n          renderMatchScoreline(collection, 'Upcoming'),\\n          renderMatchInfo(collection),\\n          renderBackground(collection, false),\\n          NBA_FOOTER\\n        )\\n      );\\n  }\\n\\n  function renderResultNbaTicket(\\n    PockyCollections.Collection memory collection\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          NBA_HEADER,\\n          renderMatchScoreline(collection, 'Result'),\\n          renderMatchInfo(collection),\\n          renderBackground(collection, true),\\n          renderResultForm(56, collection.ticketSvgMetadata.homeTeamLogo, collection.ticketSvgMetadata.homeTeamName),\\n          renderResultForm(477, collection.ticketSvgMetadata.awayTeamLogo, collection.ticketSvgMetadata.awayTeamName),\\n          renderHomeStats(collection),\\n          renderAwayStats(collection),\\n          NBA_FOOTER\\n        )\\n      );\\n  }\\n\\n  function renderMatchScoreline(\\n    PockyCollections.Collection memory collection,\\n    string memory matchStatus\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(24 60)\\\" fill=\\\"#828282\\\" font-family=\\\"NBA\\\" font-size=\\\"36\\\">',\\n          matchStatus,\\n          '</text><text transform=\\\"translate(20 80)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.ticketSvgMetadata.homeTeamSymbol,\\n          '</tspan></text><text transform=\\\"translate(20 172)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.eventResult.homeScore,\\n          '</tspan></text><text transform=\\\"translate(20 284)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.ticketSvgMetadata.awayTeamSymbol,\\n          '</tspan></text><text transform=\\\"translate(20 376)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.eventResult.awayScore,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderMatchInfo(PockyCollections.Collection memory collection) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(607 556) rotate(-90)\\\" class=\\\"tn tn2\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">DATE</tspan></text><text transform=\\\"translate(775.5 556) rotate(-90)\\\" class=\\\"ta ta2\\\"><tspan x=\\\"0\\\" y=\\\"16.7402\\\">',\\n          collection.ticketSvgMetadata.locationLine1,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"40\\\">',\\n          collection.ticketSvgMetadata.locationLine2,\\n          '</tspan></text><text transform=\\\"translate(743 556) rotate(-90)\\\" class=\\\"tn tn2\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">LOCATION</tspan></text><text transform=\\\"translate(639 556) rotate(-90)\\\" class=\\\"ta ta2\\\"><tspan x=\\\"0\\\" y=\\\"16.7402\\\">',\\n          collection.ticketSvgMetadata.dateLine1,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"40\\\">',\\n          collection.ticketSvgMetadata.dateLine2,\\n          '</tspan></text>',\\n          renderSquareImage('602', '592', '215', collection.ticketSvgMetadata.qrCodeUrl)\\n        )\\n      );\\n  }\\n\\n  function renderBackground(\\n    PockyCollections.Collection memory collection,\\n    bool transparent\\n  ) internal pure returns (string memory svg) {\\n    string memory images = string(\\n      abi.encodePacked(\\n        renderSquareImage('256', '66', '295', collection.ticketSvgMetadata.homeTeamLogo),\\n        renderSquareImage('256', '487', '295', collection.ticketSvgMetadata.awayTeamLogo)\\n      )\\n    );\\n    if (transparent) {\\n      return string(abi.encodePacked('<g opacity=\\\"0.07\\\">', images, '</g>'));\\n    }\\n    return images;\\n  }\\n\\n  function renderResultForm(\\n    uint256 baseY,\\n    string memory logo,\\n    string memory name\\n  ) internal pure returns (string memory svg) {\\n    string memory nameY = Strings.toString(baseY + 9);\\n    string memory headingY = Strings.toString(baseY + 72);\\n    return\\n      string(\\n        abi.encodePacked(\\n          renderSquareImage('264', Strings.toString(baseY), '48', logo),\\n          '<text transform=\\\"translate(324 ',\\n          nameY,\\n          ')\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"22.3203\\\">',\\n          name,\\n          '</tspan></text><text transform=\\\"translate(264 ',\\n          headingY,\\n          ')\\\" class=\\\"tn tn3\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">FIELD GOALS MADE</tspan><tspan x=\\\"0\\\" y=\\\"61.248\\\">FIELD GOALS PCT</tspan><tspan x=\\\"0\\\" y=\\\"103.248\\\">3 POINTS MADE</tspan><tspan x=\\\"0\\\" y=\\\"145.248\\\">3 POINTS PCT</tspan><tspan x=\\\"0\\\" y=\\\"187.248\\\">FREE THROWS MADE</tspan><tspan x=\\\"0\\\" y=\\\"229.248\\\">FREE THROWS PCT</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderHomeStats(PockyCollections.Collection memory collection) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(453 126)\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"20\\\">',\\n          collection.eventResult.homeFGM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"62\\\">',\\n          collection.eventResult.homeFGP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"104\\\">',\\n          collection.eventResult.homeTPM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"146\\\">',\\n          collection.eventResult.homeTPP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"188\\\">',\\n          collection.eventResult.homeFTM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"230\\\">',\\n          collection.eventResult.homeFTP,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n    function renderAwayStats(PockyCollections.Collection memory collection) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(453 549)\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"20\\\">',\\n          collection.eventResult.awayFGM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"62\\\">',\\n          collection.eventResult.awayFGP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"104\\\">',\\n          collection.eventResult.awayTPM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"146\\\">',\\n          collection.eventResult.awayTPP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"188\\\">',\\n          collection.eventResult.awayFTM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"230\\\">',\\n          collection.eventResult.awayFTP,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderSquareImage(\\n    string memory x,\\n    string memory y,\\n    string memory size,\\n    string memory href\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<image x=\\\"',\\n          x,\\n          '\\\" y=\\\"',\\n          y,\\n          '\\\" width=\\\"',\\n          size,\\n          '\\\" height=\\\"',\\n          size,\\n          '\\\" preserveAspectRatio=\\\"xMidYMid slice\\\" href=\\\"',\\n          href,\\n          '\\\"/>'\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x65f8a665b21a8b6e59def8813ce35702bdcd0f19db16fd11fd452f9bca2687ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50604051610e93380380610e9383398101604081905261002f91610078565b600080546001600160a01b039384166001600160a01b031991821617909155600180549290931691161790556100b2565b6001600160a01b038116811461007557600080fd5b50565b6000806040838503121561008b57600080fd5b825161009681610060565b60208401519092506100a781610060565b809150509250929050565b610dd2806100c16000396000f3fe60806040526004361061003f5760003560e01c80635d1090fb146100445780636cc25db714610066578063e562dfd6146100a2578063efef39a1146100c2575b600080fd5b34801561005057600080fd5b5061006461005f3660046105f5565b6100d5565b005b34801561007257600080fd5b50600154610086906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100ae57600080fd5b50600054610086906001600160a01b031681565b6100646100d03660046105f5565b610304565b600054604051634f558e7960e01b8152600481018390526001600160a01b0390911690634f558e7990602401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101429190610623565b6101935760405162461bcd60e51b815260206004820152601960248201527f636f6c6c656374696f6e20646f6573206e6f742065786973740000000000000060448201526064015b60405180910390fd5b600054604051634a83e9cd60e11b8152600481018390526001600160a01b0390911690639507d39a90602401600060405180830381865afa1580156101dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102049190810190610ba6565b604001516001600160a01b0316336001600160a01b0316146102685760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206f776e65722063616e207769746864726177000000000000000000604482015260640161018a565b600081815260026020526040902054806102c45760405162461bcd60e51b815260206004820152600a60248201527f6e6f2062616c616e636500000000000000000000000000000000000000000000604482015260640161018a565b60008281526002602052604080822082905551339183156108fc02918491818181858888f193505050501580156102ff573d6000803e3d6000fd5b505050565b600054604051634f558e7960e01b8152600481018390526001600160a01b0390911690634f558e7990602401602060405180830381865afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103719190610623565b6103bd5760405162461bcd60e51b815260206004820152601960248201527f636f6c6c656374696f6e20646f6573206e6f7420657869737400000000000000604482015260640161018a565b600054604051634a83e9cd60e11b8152600481018390526103e8916001600160a01b031690639507d39a90602401600060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104309190810190610ba6565b60a0015161043e9190610d53565b42111561048d5760405162461bcd60e51b815260206004820152601760248201527f6576656e742068617320616c726561647920656e646564000000000000000000604482015260640161018a565b600054604051634a83e9cd60e11b8152600481018390526001600160a01b0390911690639507d39a90602401600060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fe9190810190610ba6565b6020015134146105505760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420707269636500000000000000000000000000000000000000604482015260640161018a565b6001546040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018390523360248201526001600160a01b03909116906394bf804d90604401600060405180830381600087803b1580156105b557600080fd5b505af11580156105c9573d6000803e3d6000fd5b505050600082815260026020526040812080543493509091906105ed908490610d75565b909155505050565b60006020828403121561060757600080fd5b5035919050565b8051801515811461061e57600080fd5b919050565b60006020828403121561063557600080fd5b61063e8261060e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171561067f5761067f610645565b60405290565b6040516101c0810167ffffffffffffffff8111828210171561067f5761067f610645565b604051601f8201601f1916810167ffffffffffffffff811182821017156106d2576106d2610645565b604052919050565b600082601f8301126106eb57600080fd5b815167ffffffffffffffff81111561070557610705610645565b6020610719601f8301601f191682016106a9565b828152858284870101111561072d57600080fd5b60005b8381101561074b578581018301518282018401528201610730565b506000928101909101919091529392505050565b80516001600160a01b038116811461061e57600080fd5b60006101a0828403121561078957600080fd5b61079161065b565b9050815167ffffffffffffffff808211156107ab57600080fd5b6107b7858386016106da565b835260208401519150808211156107cd57600080fd5b6107d9858386016106da565b602084015260408401519150808211156107f257600080fd5b6107fe858386016106da565b6040840152606084015191508082111561081757600080fd5b610823858386016106da565b6060840152608084015191508082111561083c57600080fd5b610848858386016106da565b608084015260a084015191508082111561086157600080fd5b61086d858386016106da565b60a084015260c084015191508082111561088657600080fd5b610892858386016106da565b60c084015260e08401519150808211156108ab57600080fd5b6108b7858386016106da565b60e0840152610100915081840151818111156108d257600080fd5b6108de868287016106da565b8385015250610120915081840151818111156108f957600080fd5b610905868287016106da565b83850152506101409150818401518181111561092057600080fd5b61092c868287016106da565b83850152506101609150818401518181111561094757600080fd5b610953868287016106da565b83850152506101809150818401518181111561096e57600080fd5b61097a868287016106da565b8385015250505092915050565b60006101c0828403121561099a57600080fd5b6109a2610685565b9050815167ffffffffffffffff808211156109bc57600080fd5b6109c8858386016106da565b835260208401519150808211156109de57600080fd5b6109ea858386016106da565b60208401526040840151915080821115610a0357600080fd5b610a0f858386016106da565b60408401526060840151915080821115610a2857600080fd5b610a34858386016106da565b60608401526080840151915080821115610a4d57600080fd5b610a59858386016106da565b608084015260a0840151915080821115610a7257600080fd5b610a7e858386016106da565b60a084015260c0840151915080821115610a9757600080fd5b610aa3858386016106da565b60c084015260e0840151915080821115610abc57600080fd5b610ac8858386016106da565b60e084015261010091508184015181811115610ae357600080fd5b610aef868287016106da565b838501525061012091508184015181811115610b0a57600080fd5b610b16868287016106da565b838501525061014091508184015181811115610b3157600080fd5b610b3d868287016106da565b838501525061016091508184015181811115610b5857600080fd5b610b64868287016106da565b838501525061018091508184015181811115610b7f57600080fd5b610b8b868287016106da565b83850152506101a09150818401518181111561096e57600080fd5b600060208284031215610bb857600080fd5b815167ffffffffffffffff80821115610bd057600080fd5b908301906101c08286031215610be557600080fd5b610bed610685565b825182811115610bfc57600080fd5b610c08878286016106da565b82525060208301516020820152610c216040840161075f565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115610c5657600080fd5b610c62878286016106da565b60c08301525060e083015182811115610c7a57600080fd5b610c8687828601610776565b60e0830152506101008084015183811115610ca057600080fd5b610cac888287016106da565b8284015250506101208084015183811115610cc657600080fd5b610cd2888287016106da565b8284015250506101408084015183811115610cec57600080fd5b610cf8888287016106da565b828401525050610160610d0c81850161060e565b90820152610180610d1e84820161060e565b908201526101a08381015183811115610d3657600080fd5b610d4288828701610987565b918301919091525095945050505050565b600082610d7057634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610d9657634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220a3c7f107fd23d713b0ac9767a25bbb884a37e97dc551c9227864877f557c16d364736f6c63430008110033",
  "deployedBytecode": "0x60806040526004361061003f5760003560e01c80635d1090fb146100445780636cc25db714610066578063e562dfd6146100a2578063efef39a1146100c2575b600080fd5b34801561005057600080fd5b5061006461005f3660046105f5565b6100d5565b005b34801561007257600080fd5b50600154610086906001600160a01b031681565b6040516001600160a01b03909116815260200160405180910390f35b3480156100ae57600080fd5b50600054610086906001600160a01b031681565b6100646100d03660046105f5565b610304565b600054604051634f558e7960e01b8152600481018390526001600160a01b0390911690634f558e7990602401602060405180830381865afa15801561011e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101429190610623565b6101935760405162461bcd60e51b815260206004820152601960248201527f636f6c6c656374696f6e20646f6573206e6f742065786973740000000000000060448201526064015b60405180910390fd5b600054604051634a83e9cd60e11b8152600481018390526001600160a01b0390911690639507d39a90602401600060405180830381865afa1580156101dc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526102049190810190610ba6565b604001516001600160a01b0316336001600160a01b0316146102685760405162461bcd60e51b815260206004820152601760248201527f6f6e6c79206f776e65722063616e207769746864726177000000000000000000604482015260640161018a565b600081815260026020526040902054806102c45760405162461bcd60e51b815260206004820152600a60248201527f6e6f2062616c616e636500000000000000000000000000000000000000000000604482015260640161018a565b60008281526002602052604080822082905551339183156108fc02918491818181858888f193505050501580156102ff573d6000803e3d6000fd5b505050565b600054604051634f558e7960e01b8152600481018390526001600160a01b0390911690634f558e7990602401602060405180830381865afa15801561034d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103719190610623565b6103bd5760405162461bcd60e51b815260206004820152601960248201527f636f6c6c656374696f6e20646f6573206e6f7420657869737400000000000000604482015260640161018a565b600054604051634a83e9cd60e11b8152600481018390526103e8916001600160a01b031690639507d39a90602401600060405180830381865afa158015610408573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104309190810190610ba6565b60a0015161043e9190610d53565b42111561048d5760405162461bcd60e51b815260206004820152601760248201527f6576656e742068617320616c726561647920656e646564000000000000000000604482015260640161018a565b600054604051634a83e9cd60e11b8152600481018390526001600160a01b0390911690639507d39a90602401600060405180830381865afa1580156104d6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526104fe9190810190610ba6565b6020015134146105505760405162461bcd60e51b815260206004820152600d60248201527f696e76616c696420707269636500000000000000000000000000000000000000604482015260640161018a565b6001546040517f94bf804d000000000000000000000000000000000000000000000000000000008152600481018390523360248201526001600160a01b03909116906394bf804d90604401600060405180830381600087803b1580156105b557600080fd5b505af11580156105c9573d6000803e3d6000fd5b505050600082815260026020526040812080543493509091906105ed908490610d75565b909155505050565b60006020828403121561060757600080fd5b5035919050565b8051801515811461061e57600080fd5b919050565b60006020828403121561063557600080fd5b61063e8261060e565b9392505050565b634e487b7160e01b600052604160045260246000fd5b6040516101a0810167ffffffffffffffff8111828210171561067f5761067f610645565b60405290565b6040516101c0810167ffffffffffffffff8111828210171561067f5761067f610645565b604051601f8201601f1916810167ffffffffffffffff811182821017156106d2576106d2610645565b604052919050565b600082601f8301126106eb57600080fd5b815167ffffffffffffffff81111561070557610705610645565b6020610719601f8301601f191682016106a9565b828152858284870101111561072d57600080fd5b60005b8381101561074b578581018301518282018401528201610730565b506000928101909101919091529392505050565b80516001600160a01b038116811461061e57600080fd5b60006101a0828403121561078957600080fd5b61079161065b565b9050815167ffffffffffffffff808211156107ab57600080fd5b6107b7858386016106da565b835260208401519150808211156107cd57600080fd5b6107d9858386016106da565b602084015260408401519150808211156107f257600080fd5b6107fe858386016106da565b6040840152606084015191508082111561081757600080fd5b610823858386016106da565b6060840152608084015191508082111561083c57600080fd5b610848858386016106da565b608084015260a084015191508082111561086157600080fd5b61086d858386016106da565b60a084015260c084015191508082111561088657600080fd5b610892858386016106da565b60c084015260e08401519150808211156108ab57600080fd5b6108b7858386016106da565b60e0840152610100915081840151818111156108d257600080fd5b6108de868287016106da565b8385015250610120915081840151818111156108f957600080fd5b610905868287016106da565b83850152506101409150818401518181111561092057600080fd5b61092c868287016106da565b83850152506101609150818401518181111561094757600080fd5b610953868287016106da565b83850152506101809150818401518181111561096e57600080fd5b61097a868287016106da565b8385015250505092915050565b60006101c0828403121561099a57600080fd5b6109a2610685565b9050815167ffffffffffffffff808211156109bc57600080fd5b6109c8858386016106da565b835260208401519150808211156109de57600080fd5b6109ea858386016106da565b60208401526040840151915080821115610a0357600080fd5b610a0f858386016106da565b60408401526060840151915080821115610a2857600080fd5b610a34858386016106da565b60608401526080840151915080821115610a4d57600080fd5b610a59858386016106da565b608084015260a0840151915080821115610a7257600080fd5b610a7e858386016106da565b60a084015260c0840151915080821115610a9757600080fd5b610aa3858386016106da565b60c084015260e0840151915080821115610abc57600080fd5b610ac8858386016106da565b60e084015261010091508184015181811115610ae357600080fd5b610aef868287016106da565b838501525061012091508184015181811115610b0a57600080fd5b610b16868287016106da565b838501525061014091508184015181811115610b3157600080fd5b610b3d868287016106da565b838501525061016091508184015181811115610b5857600080fd5b610b64868287016106da565b838501525061018091508184015181811115610b7f57600080fd5b610b8b868287016106da565b83850152506101a09150818401518181111561096e57600080fd5b600060208284031215610bb857600080fd5b815167ffffffffffffffff80821115610bd057600080fd5b908301906101c08286031215610be557600080fd5b610bed610685565b825182811115610bfc57600080fd5b610c08878286016106da565b82525060208301516020820152610c216040840161075f565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115610c5657600080fd5b610c62878286016106da565b60c08301525060e083015182811115610c7a57600080fd5b610c8687828601610776565b60e0830152506101008084015183811115610ca057600080fd5b610cac888287016106da565b8284015250506101208084015183811115610cc657600080fd5b610cd2888287016106da565b8284015250506101408084015183811115610cec57600080fd5b610cf8888287016106da565b828401525050610160610d0c81850161060e565b90820152610180610d1e84820161060e565b908201526101a08381015183811115610d3657600080fd5b610d4288828701610987565b918301919091525095945050505050565b600082610d7057634e487b7160e01b600052601260045260246000fd5b500490565b80820180821115610d9657634e487b7160e01b600052601160045260246000fd5b9291505056fea2646970667358221220a3c7f107fd23d713b0ac9767a25bbb884a37e97dc551c9227864877f557c16d364736f6c63430008110033",
  "devdoc": {
    "details": "Mints a new PockeyTicket dNFT as a user pays, and manages the revenue per collection.",
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6542,
        "contract": "contracts/PockyTicketSales.sol:PockyTicketSales",
        "label": "collections",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(PockyCollections)6329"
      },
      {
        "astId": 6545,
        "contract": "contracts/PockyTicketSales.sol:PockyTicketSales",
        "label": "ticket",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(Ticket)6532"
      },
      {
        "astId": 6549,
        "contract": "contracts/PockyTicketSales.sol:PockyTicketSales",
        "label": "_balancePerCollectionId",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_uint256)"
      }
    ],
    "types": {
      "t_contract(PockyCollections)6329": {
        "encoding": "inplace",
        "label": "contract PockyCollections",
        "numberOfBytes": "20"
      },
      "t_contract(Ticket)6532": {
        "encoding": "inplace",
        "label": "contract Ticket",
        "numberOfBytes": "20"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}