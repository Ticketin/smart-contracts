{
  "address": "0x1Ffa7ECdB47186B7215C98b2CAe5916F969C0C15",
  "abi": [
    {
      "inputs": [],
      "name": "NBA_FOOTER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "NBA_HEADER",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "priceInETH",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "maxSupply",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startDate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "endDate",
              "type": "uint256"
            },
            {
              "internalType": "string",
              "name": "matchDate",
              "type": "string"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "homeTeamName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeTeamSymbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeTeamLogo",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeTeamColor",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayTeamName",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayTeamSymbol",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayTeamLogo",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayTeamColor",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "qrCodeUrl",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "dateLine1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "dateLine2",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "locationLine1",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "locationLine2",
                  "type": "string"
                }
              ],
              "internalType": "struct PockyCollections.TicketSVGMetadata",
              "name": "ticketSvgMetadata",
              "type": "tuple"
            },
            {
              "internalType": "string",
              "name": "eventLocation",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "description",
              "type": "string"
            },
            {
              "internalType": "string",
              "name": "imageUrl",
              "type": "string"
            },
            {
              "internalType": "bool",
              "name": "featured",
              "type": "bool"
            },
            {
              "internalType": "bool",
              "name": "updated",
              "type": "bool"
            },
            {
              "components": [
                {
                  "internalType": "string",
                  "name": "homeScore",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeFGM",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeFGP",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeTPM",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeTPP",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeFTM",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "homeFTP",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayScore",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayFGM",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayFGP",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayTPM",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayTPP",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayFTM",
                  "type": "string"
                },
                {
                  "internalType": "string",
                  "name": "awayFTP",
                  "type": "string"
                }
              ],
              "internalType": "struct PockyCollections.OracleResult",
              "name": "eventResult",
              "type": "tuple"
            }
          ],
          "internalType": "struct PockyCollections.Collection",
          "name": "collection",
          "type": "tuple"
        }
      ],
      "name": "renderSVG",
      "outputs": [
        {
          "internalType": "string",
          "name": "svg",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0xa915b5272b9b8623b2fe06d7f115370e137d5924b2572d891f41ba23784b153e",
  "receipt": {
    "to": null,
    "from": "0x63390E2c9E21dAEB5CA74b0B9CAf1d4fd77027dF",
    "contractAddress": "0x1Ffa7ECdB47186B7215C98b2CAe5916F969C0C15",
    "transactionIndex": 2,
    "gasUsed": "2384442",
    "logsBloom": "0x
    "blockHash": "0x3f6557274a622c2b8aed5403d52767388ade3eed09c1523cb1ebb11ebc0d9448",
    "transactionHash": "0xa915b5272b9b8623b2fe06d7f115370e137d5924b2572d891f41ba23784b153e",
    "logs": [
      {
        "transactionIndex": 2,
        "blockNumber": 36598971,
        "transactionHash": "0xa915b5272b9b8623b2fe06d7f115370e137d5924b2572d891f41ba23784b153e",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000063390e2c9e21daeb5ca74b0b9caf1d4fd77027df",
          "0x000000000000000000000000c26880a0af2ea0c7e8130e6ec47af756465452e8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000043c51950e7fc60000000000000000000000000000000000000000000000005818e3429bcc81660000000000000000000000000000000000000000000001ff6824a8ed82d7bd574000000000000000000000000000000000000000000000005814a6f106be01a00000000000000000000000000000000000000000000001ff6828e53f17e63d1d4",
        "logIndex": 9,
        "blockHash": "0x3f6557274a622c2b8aed5403d52767388ade3eed09c1523cb1ebb11ebc0d9448"
      }
    ],
    "blockNumber": 36598971,
    "cumulativeGasUsed": "2783418",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "9a05a5c191857363a33e43ee8ec18ba5",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"NBA_FOOTER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"NBA_HEADER\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"priceInETH\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxSupply\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startDate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"endDate\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"matchDate\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"homeTeamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeTeamSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeTeamLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeTeamColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayTeamName\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayTeamSymbol\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayTeamLogo\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayTeamColor\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"qrCodeUrl\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateLine1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"dateLine2\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationLine1\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"locationLine2\",\"type\":\"string\"}],\"internalType\":\"struct PockyCollections.TicketSVGMetadata\",\"name\":\"ticketSvgMetadata\",\"type\":\"tuple\"},{\"internalType\":\"string\",\"name\":\"eventLocation\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"description\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"imageUrl\",\"type\":\"string\"},{\"internalType\":\"bool\",\"name\":\"featured\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"updated\",\"type\":\"bool\"},{\"components\":[{\"internalType\":\"string\",\"name\":\"homeScore\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeFGM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeFGP\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeTPM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeTPP\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeFTM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"homeFTP\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayScore\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayFGM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayFGP\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayTPM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayTPP\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayFTM\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"awayFTP\",\"type\":\"string\"}],\"internalType\":\"struct PockyCollections.OracleResult\",\"name\":\"eventResult\",\"type\":\"tuple\"}],\"internalType\":\"struct PockyCollections.Collection\",\"name\":\"collection\",\"type\":\"tuple\"}],\"name\":\"renderSVG\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"svg\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TicketSVGRenderer.sol\":\"TicketSVGRenderer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/PockyCollections.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\\nimport {Base64} from 'base64-sol/base64.sol';\\nimport {TicketSVGRenderer} from './TicketSVGRenderer.sol';\\n\\n/**\\n * @dev A module manages the collection data (i.e. metadata shared across tickets for an event),\\n * and renders a OpenSea-compliant ERC721 metadata for each tokens.\\n * A metadata can be updated by Chainlink oracle (API Consumer), for example, for updating the event result.\\n *\\n * The frontend app should use it for serving available drops/collections.\\n */\\ncontract PockyCollections is AccessControl {\\n  /** @dev REGISTRAR_ROLE is admin user, who can register a collection. */\\n  bytes32 public constant REGISTRAR_ROLE = keccak256('REGISTRAR_ROLE');\\n\\n  /** @dev RESULT_ORACLE_ROLE is given to Chainlink Oracle, who can update the `eventResult` of a collection. */\\n  bytes32 public constant RESULT_ORACLE_ROLE = keccak256('RESULT_ORACLE_ROLE');\\n\\n  struct Collection {\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 basic information\\n    /** The event name. */\\n    string name;\\n    /** ticket price */\\n    uint256 priceInETH;\\n    /** the collection owner. only the owner can withdraw the revenue */\\n    address owner;\\n    /** the maximum count (mint cap) of tickets per a collection */\\n    uint256 maxSupply;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 date-related fields\\n    // NOTE: time-sensitive sections such as Now, Upcoming should be categorized in\\n    // the frontend by parsing startDate / endDate. Here are the cases:\\n    // - Now: startDate <= Date.now() < endDate\\n    // - Upcoming: Date.now() > startDate\\n    // - Past (hidden): Date.now() >= endDate\\n\\n    /** start date, in POSIX time (millis) */\\n    uint256 startDate;\\n    /** end date, in POSIX time (millis) */\\n    uint256 endDate;\\n    /** YYYYMMDD */\\n    string matchDate;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 metadata\\n\\n    TicketSVGMetadata ticketSvgMetadata;\\n    /** The summary of the location where the event held. shown in ticket image */\\n    string eventLocation;\\n    /** Multi-line description shown in the detail page */\\n    string description;\\n    /** Banner image URL. */\\n    string imageUrl;\\n    /** Should be listed in the top of the main page? */\\n    bool featured;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 result-related fields\\n    /** Whether the result is updated. */\\n    bool updated;\\n    /** The updated result (by Chainlink oracle) */\\n    OracleResult eventResult;\\n  }\\n\\n  struct TicketSVGMetadata {\\n    // home team info\\n    string homeTeamName;\\n    string homeTeamSymbol;\\n    string homeTeamLogo;\\n    string homeTeamColor;\\n    // away team info\\n    string awayTeamName;\\n    string awayTeamSymbol;\\n    string awayTeamLogo;\\n    string awayTeamColor;\\n    /** QR Code URL. `https://pocky.deno.dev/api/qrcode/${collectionId}` */\\n    string qrCodeUrl;\\n    /** Only the day of week, in uppercase. e.g. `\\\"WEDNESDAY,\\\"` */\\n    string dateLine1;\\n    /** rest of the date, in uppercase. e.g. `\\\"OCTOBER 20 PM 7:00\\\"` */\\n    string dateLine2;\\n    /** Only the first comma, in uppercase. e.g. `\\\"TD GARDEN,\\\"` */\\n    string locationLine1;\\n    /** rest of the date, in uppercase. e.g. `\\\"100 Legends Way, Boston, MA\\\"` */\\n    string locationLine2;\\n  }\\n\\n  struct OracleResult {\\n    string homeScore;\\n    string homeFGM;\\n    string homeFGP;\\n    string homeTPM;\\n    string homeTPP;\\n    string homeFTM;\\n    string homeFTP;\\n    string awayScore;\\n    string awayFGM;\\n    string awayFGP;\\n    string awayTPM;\\n    string awayTPP;\\n    string awayFTM;\\n    string awayFTP;\\n  }\\n\\n  Collection[] private _collections;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(REGISTRAR_ROLE, msg.sender);\\n    _setupRole(RESULT_ORACLE_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Registers a new collection. Should have {@link REGISTRAR_ROLE}.\\n   * @param collection The collection data.\\n   */\\n  function register(Collection calldata collection) external onlyRole(REGISTRAR_ROLE) {\\n    _collections.push(collection);\\n  }\\n\\n  /** @dev returns whether the collectionId exists. */\\n  function exists(uint256 collectionId) public view returns (bool) {\\n    return bytes(_collections[collectionId].name).length > 0;\\n  }\\n\\n  /** @dev returns the collection data for given ID. */\\n  function get(uint256 collectionId) external view returns (Collection memory) {\\n    require(exists(collectionId), 'collection does not exist');\\n    return _collections[collectionId];\\n  }\\n\\n  /**\\n   * @dev The entire collection data.\\n   * The frontend app should use this method for listing collections in the main page.\\n   */\\n  function list() external view returns (Collection[] memory) {\\n    return _collections;\\n  }\\n\\n  /**\\n   * @dev Updates a event result of a collection. Should have {@link RESULT_ORACLE_ROLE} (i.e. Oracle!)\\n   * @notice This function is called by Chainlink Oracle.\\n   * @param collectionId The collection you want to update\\n   * @param result The event result\\n   */\\n  function updateResult(uint256 collectionId, OracleResult calldata result) external onlyRole(RESULT_ORACLE_ROLE) {\\n    require(exists(collectionId), 'collection does not exist');\\n    _collections[collectionId].eventResult = result;\\n    _collections[collectionId].updated = true;\\n  }\\n\\n  /**\\n   * @dev Generates a OpenSea-compliant ERC721 metadata for a token.\\n   *\\n   * @param collectionId the collection ID\\n   */\\n  function constructTokenURIOf(uint256 collectionId) external view returns (string memory) {\\n    Collection storage collection = _collections[collectionId];\\n    string memory image = Base64.encode(bytes(TicketSVGRenderer.renderSVG(collection)));\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                collection.name,\\n                ' - Pocky dNFT Ticket\\\", \\\"description\\\":\\\"',\\n                collection.description,\\n                '\\\", \\\"animation_url\\\": \\\"https://pocky.deno.dev/render?svg=',\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function svgOf(uint256 collectionId) public view returns (string memory) {\\n    Collection storage collection = _collections[collectionId];\\n    return TicketSVGRenderer.renderSVG(collection);\\n  }\\n}\\n\",\"keccak256\":\"0xf8ae93e35b6dead8e2db0b09e19ed15d44f3e3af9d0cc4165c84f67c871cfc92\",\"license\":\"MIT\"},\"contracts/TicketSVGRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PockyCollections} from './PockyCollections.sol';\\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary TicketSVGRenderer {\\n  string public constant NBA_HEADER =\\n    '<svg width=\\\"848\\\" height=\\\"848\\\" viewBox=\\\"0 0 848 848\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><defs><style>@font-face { font-family: \\\"NBA\\\"; src: url(\\\"https://static.duckee.xyz/NBA-Pacers.woff2\\\"); }.ta { font: bold 80px Arial; fill: white; letter-spacing: -0.03em; }.ta2 { font-size: 18px; fill: black; } .ta3 { font-size: 24px; fill: black; } .tn { font: 47px NBA, sans-serif; letter-spacing: -0.03em; fill: white; }.tn2 { fill: #828282; font-size: 24px; } .tn3 { fill: #646464; font-size: 24px; }</style><pattern id=\\\"nbalogo\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#inba\\\" transform=\\\"scale(0.0026178 0.00152439)\\\" /></pattern><clipPath id=\\\"cb\\\"><rect width=\\\"848\\\" height=\\\"848\\\" fill=\\\"white\\\" /></clipPath><image id=\\\"inba\\\" width=\\\"382\\\" height=\\\"656\\\" xlink:href=\\\"https://static.duckee.xyz/nba.png\\\" /></defs><g clip-path=\\\"url(#cb)\\\"><path d=\\\"M24 0H535C535 17.6731 549.327 32 567 32V816C549.327 816 535 830.327 535 848H24V0Z\\\" fill=\\\"#F3F3F3\\\" /><path d=\\\"M16 0.5L239.5 0.5L239.5 847.5H16C7.43959 847.5 0.5 840.56 0.5 832L0.5 16C0.5 7.43957 7.43959 0.5 16 0.5Z\\\" fill=\\\"black\\\" stroke=\\\"#F5F5F5\\\" /><rect x=\\\"24\\\" y=\\\"494\\\" width=\\\"191\\\" height=\\\"328\\\" fill=\\\"url(#nbalogo)\\\" /><path d=\\\"M567 35L567 813\\\" stroke=\\\"#CECECE\\\" stroke-width=\\\"3\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"40 40\\\" /><path d=\\\"M599 -0.000976562C599 17.6721 584.673 31.999 567 31.999V815.999C584.673 815.999 599 830.326 599 847.999H832C840.837 847.999 848 840.836 848 831.999V15.999C848 7.16247 840.837 -0.000976562 832 -0.000976562H599Z\\\" fill=\\\"#F5F5F5\\\" /><line x1=\\\"567\\\" y1=\\\"283.999\\\" x2=\\\"848\\\" y2=\\\"283.999\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"708\\\" cy=\\\"284.999\\\" r=\\\"56\\\" transform=\\\"rotate(-90 708 284.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"704\\\" cy=\\\"455.999\\\" r=\\\"50\\\" transform=\\\"rotate(-90 704 455.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M693.239 602.009L693.172 602H693.104H599L599 494C599 433.801 647.801 385 708 385C768.199 385 817 433.801 817 494V602H722.896H722.828L722.761 602.009C717.935 602.662 713.007 603 708 603C702.993 603 698.065 602.662 693.239 602.009Z\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M722.761 -32.009L722.828 -32L722.896 -32L817 -32L817 76C817 136.199 768.199 185 708 185C647.801 185 599 136.199 599 76L599 -32L693.104 -32L693.172 -32L693.239 -32.009C698.065 -32.6625 702.993 -33 708 -33C713.007 -33 717.935 -32.6625 722.761 -32.009Z\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><rect x=\\\"654\\\" y=\\\"601.999\\\" width=\\\"145\\\" height=\\\"100\\\" transform=\\\"rotate(-90 654 601.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><rect x=\\\"654\\\" y=\\\"118.999\\\" width=\\\"118\\\" height=\\\"100\\\" transform=\\\"rotate(-90 654 118.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"704\\\" cy=\\\"113.999\\\" r=\\\"50\\\" transform=\\\"rotate(90 704 113.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M567 35L567 813\\\" stroke=\\\"#CECECE\\\" stroke-width=\\\"3\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"40 40\\\" /><rect x=\\\"771\\\" width=\\\"46\\\" height=\\\"240\\\" fill=\\\"#E73325\\\" /><rect x=\\\"714\\\" width=\\\"46\\\" height=\\\"198\\\" fill=\\\"#E73325\\\"/><text transform=\\\"translate(718 189) rotate(-90)\\\" class=\\\"tn\\\"><tspan x=\\\"0.430511\\\" y=\\\"37.694\\\">2023 NBA</tspan></text><text transform=\\\"translate(775 231) rotate(-90)\\\" class=\\\"tn\\\"><tspan x=\\\"0.565628\\\" y=\\\"37.694\\\">GAME TICKET</tspan></text>';\\n  string public constant NBA_FOOTER = '</g></svg>';\\n\\n  function renderSVG(PockyCollections.Collection memory collection) public pure returns (string memory svg) {\\n    if (collection.updated) {\\n      return renderResultNbaTicket(collection);\\n    }\\n    return renderUpcomingNbaTicket(collection);\\n  }\\n\\n  function renderUpcomingNbaTicket(\\n    PockyCollections.Collection memory collection\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          NBA_HEADER,\\n          renderMatchScoreline(collection, 'Upcoming'),\\n          renderMatchInfo(collection),\\n          renderBackground(collection, false),\\n          NBA_FOOTER\\n        )\\n      );\\n  }\\n\\n  function renderResultNbaTicket(\\n    PockyCollections.Collection memory collection\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          NBA_HEADER,\\n          renderMatchScoreline(collection, 'Result'),\\n          renderMatchInfo(collection),\\n          renderBackground(collection, true),\\n          renderResultForm(56, collection.ticketSvgMetadata.homeTeamLogo, collection.ticketSvgMetadata.homeTeamName),\\n          renderResultForm(477, collection.ticketSvgMetadata.awayTeamLogo, collection.ticketSvgMetadata.awayTeamName),\\n          renderHomeStats(collection),\\n          renderAwayStats(collection),\\n          NBA_FOOTER\\n        )\\n      );\\n  }\\n\\n  function renderMatchScoreline(\\n    PockyCollections.Collection memory collection,\\n    string memory matchStatus\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(24 60)\\\" fill=\\\"#828282\\\" font-family=\\\"NBA\\\" font-size=\\\"36\\\">',\\n          matchStatus,\\n          '</text><text transform=\\\"translate(20 80)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.ticketSvgMetadata.homeTeamSymbol,\\n          '</tspan></text><text transform=\\\"translate(20 172)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.eventResult.homeScore,\\n          '</tspan></text><text transform=\\\"translate(20 284)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.ticketSvgMetadata.awayTeamSymbol,\\n          '</tspan></text><text transform=\\\"translate(20 376)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.eventResult.awayScore,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderMatchInfo(PockyCollections.Collection memory collection) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(607 556) rotate(-90)\\\" class=\\\"tn tn2\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">DATE</tspan></text><text transform=\\\"translate(775.5 556) rotate(-90)\\\" class=\\\"ta ta2\\\"><tspan x=\\\"0\\\" y=\\\"16.7402\\\">',\\n          collection.ticketSvgMetadata.locationLine1,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"40\\\">',\\n          collection.ticketSvgMetadata.locationLine2,\\n          '</tspan></text><text transform=\\\"translate(743 556) rotate(-90)\\\" class=\\\"tn tn2\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">LOCATION</tspan></text><text transform=\\\"translate(639 556) rotate(-90)\\\" class=\\\"ta ta2\\\"><tspan x=\\\"0\\\" y=\\\"16.7402\\\">',\\n          collection.ticketSvgMetadata.dateLine1,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"40\\\">',\\n          collection.ticketSvgMetadata.dateLine2,\\n          '</tspan></text>',\\n          renderSquareImage('602', '592', '215', collection.ticketSvgMetadata.qrCodeUrl)\\n        )\\n      );\\n  }\\n\\n  function renderBackground(\\n    PockyCollections.Collection memory collection,\\n    bool transparent\\n  ) internal pure returns (string memory svg) {\\n    string memory images = string(\\n      abi.encodePacked(\\n        renderSquareImage('256', '66', '295', collection.ticketSvgMetadata.homeTeamLogo),\\n        renderSquareImage('256', '487', '295', collection.ticketSvgMetadata.awayTeamLogo)\\n      )\\n    );\\n    if (transparent) {\\n      return string(abi.encodePacked('<g opacity=\\\"0.07\\\">', images, '</g>'));\\n    }\\n    return images;\\n  }\\n\\n  function renderResultForm(\\n    uint256 baseY,\\n    string memory logo,\\n    string memory name\\n  ) internal pure returns (string memory svg) {\\n    string memory nameY = Strings.toString(baseY + 9);\\n    string memory headingY = Strings.toString(baseY + 72);\\n    return\\n      string(\\n        abi.encodePacked(\\n          renderSquareImage('264', Strings.toString(baseY), '48', logo),\\n          '<text transform=\\\"translate(324 ',\\n          nameY,\\n          ')\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"22.3203\\\">',\\n          name,\\n          '</tspan></text><text transform=\\\"translate(264 ',\\n          headingY,\\n          ')\\\" class=\\\"tn tn3\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">FIELD GOALS MADE</tspan><tspan x=\\\"0\\\" y=\\\"61.248\\\">FIELD GOALS PCT</tspan><tspan x=\\\"0\\\" y=\\\"103.248\\\">3 POINTS MADE</tspan><tspan x=\\\"0\\\" y=\\\"145.248\\\">3 POINTS PCT</tspan><tspan x=\\\"0\\\" y=\\\"187.248\\\">FREE THROWS MADE</tspan><tspan x=\\\"0\\\" y=\\\"229.248\\\">FREE THROWS PCT</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderHomeStats(PockyCollections.Collection memory collection) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(453 126)\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"20\\\">',\\n          collection.eventResult.homeFGM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"62\\\">',\\n          collection.eventResult.homeFGP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"104\\\">',\\n          collection.eventResult.homeTPM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"146\\\">',\\n          collection.eventResult.homeTPP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"188\\\">',\\n          collection.eventResult.homeFTM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"230\\\">',\\n          collection.eventResult.homeFTP,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n    function renderAwayStats(PockyCollections.Collection memory collection) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(453 549)\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"20\\\">',\\n          collection.eventResult.awayFGM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"62\\\">',\\n          collection.eventResult.awayFGP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"104\\\">',\\n          collection.eventResult.awayTPM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"146\\\">',\\n          collection.eventResult.awayTPP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"188\\\">',\\n          collection.eventResult.awayFTM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"230\\\">',\\n          collection.eventResult.awayFTP,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderSquareImage(\\n    string memory x,\\n    string memory y,\\n    string memory size,\\n    string memory href\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<image x=\\\"',\\n          x,\\n          '\\\" y=\\\"',\\n          y,\\n          '\\\" width=\\\"',\\n          size,\\n          '\\\" height=\\\"',\\n          size,\\n          '\\\" preserveAspectRatio=\\\"xMidYMid slice\\\" href=\\\"',\\n          href,\\n          '\\\"/>'\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x65f8a665b21a8b6e59def8813ce35702bdcd0f19db16fd11fd452f9bca2687ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}