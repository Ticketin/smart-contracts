{
  "address": "0x50f3b9EA220b7C5d9cf815E7846c121db388FCFe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract PockyCollections",
          "name": "_collections",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkCancelled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkFulfilled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "id",
          "type": "bytes32"
        }
      ],
      "name": "ChainlinkRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferRequested",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "collections",
      "outputs": [
        {
          "internalType": "contract PockyCollections",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "_requestId",
          "type": "bytes32"
        },
        {
          "internalType": "string",
          "name": "oracleResultAbiData",
          "type": "string"
        }
      ],
      "name": "fulfill",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        }
      ],
      "name": "requestFetchMatchResult",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "requestId",
          "type": "bytes32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "requestIdToCollectionId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "collectionId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "oracleResultAbiData",
          "type": "string"
        }
      ],
      "name": "updateEventResult",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawLink",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x7fe63d57307efd67909043521c690a8d7222e2a1f2e18e660ae7212389566672",
  "receipt": {
    "to": null,
    "from": "0x63390E2c9E21dAEB5CA74b0B9CAf1d4fd77027dF",
    "contractAddress": "0x50f3b9EA220b7C5d9cf815E7846c121db388FCFe",
    "transactionIndex": 5,
    "gasUsed": "1923801",
    "logsBloom": "0x
    "blockHash": "0x9ee0cb1bd8eca7b9f3c44d3b48bc523741a6da8720638d3ee688bb76cad8f524",
    "transactionHash": "0x7fe63d57307efd67909043521c690a8d7222e2a1f2e18e660ae7212389566672",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 36599119,
        "transactionHash": "0x7fe63d57307efd67909043521c690a8d7222e2a1f2e18e660ae7212389566672",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x00000000000000000000000063390e2c9e21daeb5ca74b0b9caf1d4fd77027df",
          "0x0000000000000000000000003a22c8bc68e98b0faf40f349dd2b2890fae01484"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000014810f721a420e000000000000000000000000000000000000000000000004f5e8f04f9478e6b0000000000000000000000000000000000000000000000a951ff3a33e11b6c0e0000000000000000000000000000000000000000000000004f5d46f40225ea4a2000000000000000000000000000000000000000000000a952008244d83d102ee",
        "logIndex": 12,
        "blockHash": "0x9ee0cb1bd8eca7b9f3c44d3b48bc523741a6da8720638d3ee688bb76cad8f524"
      }
    ],
    "blockNumber": 36599119,
    "cumulativeGasUsed": "2147192",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xa9f6E9B62A45216cdC67DB52BaE41269185d931B"
  ],
  "numDeployments": 1,
  "solcInputHash": "cfcb2443b622d3e037be2cd561e33eb1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract PockyCollections\",\"name\":\"_collections\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkCancelled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkFulfilled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"id\",\"type\":\"bytes32\"}],\"name\":\"ChainlinkRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferRequested\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"collections\",\"outputs\":[{\"internalType\":\"contract PockyCollections\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"_requestId\",\"type\":\"bytes32\"},{\"internalType\":\"string\",\"name\":\"oracleResultAbiData\",\"type\":\"string\"}],\"name\":\"fulfill\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"}],\"name\":\"requestFetchMatchResult\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"requestId\",\"type\":\"bytes32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"requestIdToCollectionId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"collectionId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"oracleResultAbiData\",\"type\":\"string\"}],\"name\":\"updateEventResult\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawLink\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"updateEventResult(uint256,string)\":{\"params\":{\"collectionId\":\"The collection you want to update\",\"oracleResultAbiData\":\"The result data from Pocky Sport API Proxy\"}}},\"stateVariables\":{\"collections\":{\"details\":\"PockyCollections contract, which is a module responsible for managing the dNFT metadata \"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"acceptOwnership()\":{\"notice\":\"Allows an ownership transfer to be completed by the recipient.\"},\"fulfill(bytes32,string)\":{\"notice\":\"Receive the response from the Chainlink, and update the collection result.\"},\"owner()\":{\"notice\":\"Get the current owner\"},\"requestFetchMatchResult(uint256)\":{\"notice\":\"Create a Chainlink request to retrieve ESPN API response.\"},\"transferOwnership(address)\":{\"notice\":\"Allows an owner to begin transferring ownership to a new address, pending.\"},\"updateEventResult(uint256,string)\":{\"notice\":\"Decodes the `oracleResultAbiData` from Pocky Sport API Proxy as a `PockyCollections.OracleResult` struct, and update the collection result.\"},\"withdrawLink()\":{\"notice\":\"Allow withdraw of Link tokens from the contract\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/PockyAPIConsumer.sol\":\"PockyAPIConsumer\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/Chainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport {CBORChainlink} from \\\"./vendor/CBORChainlink.sol\\\";\\nimport {BufferChainlink} from \\\"./vendor/BufferChainlink.sol\\\";\\n\\n/**\\n * @title Library for common Chainlink functions\\n * @dev Uses imported CBOR library for encoding to buffer\\n */\\nlibrary Chainlink {\\n  uint256 internal constant defaultBufferSize = 256; // solhint-disable-line const-name-snakecase\\n\\n  using CBORChainlink for BufferChainlink.buffer;\\n\\n  struct Request {\\n    bytes32 id;\\n    address callbackAddress;\\n    bytes4 callbackFunctionId;\\n    uint256 nonce;\\n    BufferChainlink.buffer buf;\\n  }\\n\\n  /**\\n   * @notice Initializes a Chainlink request\\n   * @dev Sets the ID, callback address, and callback function signature on the request\\n   * @param self The uninitialized request\\n   * @param jobId The Job Specification ID\\n   * @param callbackAddr The callback address\\n   * @param callbackFunc The callback function signature\\n   * @return The initialized request\\n   */\\n  function initialize(\\n    Request memory self,\\n    bytes32 jobId,\\n    address callbackAddr,\\n    bytes4 callbackFunc\\n  ) internal pure returns (Chainlink.Request memory) {\\n    BufferChainlink.init(self.buf, defaultBufferSize);\\n    self.id = jobId;\\n    self.callbackAddress = callbackAddr;\\n    self.callbackFunctionId = callbackFunc;\\n    return self;\\n  }\\n\\n  /**\\n   * @notice Sets the data for the buffer without encoding CBOR on-chain\\n   * @dev CBOR can be closed with curly-brackets {} or they can be left off\\n   * @param self The initialized request\\n   * @param data The CBOR data\\n   */\\n  function setBuffer(Request memory self, bytes memory data) internal pure {\\n    BufferChainlink.init(self.buf, data.length);\\n    BufferChainlink.append(self.buf, data);\\n  }\\n\\n  /**\\n   * @notice Adds a string value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The string value to add\\n   */\\n  function add(\\n    Request memory self,\\n    string memory key,\\n    string memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeString(value);\\n  }\\n\\n  /**\\n   * @notice Adds a bytes value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The bytes value to add\\n   */\\n  function addBytes(\\n    Request memory self,\\n    string memory key,\\n    bytes memory value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeBytes(value);\\n  }\\n\\n  /**\\n   * @notice Adds a int256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The int256 value to add\\n   */\\n  function addInt(\\n    Request memory self,\\n    string memory key,\\n    int256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds a uint256 value to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param value The uint256 value to add\\n   */\\n  function addUint(\\n    Request memory self,\\n    string memory key,\\n    uint256 value\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.encodeUInt(value);\\n  }\\n\\n  /**\\n   * @notice Adds an array of strings to the request with a given key name\\n   * @param self The initialized request\\n   * @param key The name of the key\\n   * @param values The array of string values to add\\n   */\\n  function addStringArray(\\n    Request memory self,\\n    string memory key,\\n    string[] memory values\\n  ) internal pure {\\n    self.buf.encodeString(key);\\n    self.buf.startArray();\\n    for (uint256 i = 0; i < values.length; i++) {\\n      self.buf.encodeString(values[i]);\\n    }\\n    self.buf.endSequence();\\n  }\\n}\\n\",\"keccak256\":\"0x3e133ddc69d0909fbe338c34b70cbf8dd262c70fd670b3632424c1858de25105\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ChainlinkClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Chainlink.sol\\\";\\nimport \\\"./interfaces/ENSInterface.sol\\\";\\nimport \\\"./interfaces/LinkTokenInterface.sol\\\";\\nimport \\\"./interfaces/ChainlinkRequestInterface.sol\\\";\\nimport \\\"./interfaces/OperatorInterface.sol\\\";\\nimport \\\"./interfaces/PointerInterface.sol\\\";\\nimport {ENSResolver as ENSResolver_Chainlink} from \\\"./vendor/ENSResolver.sol\\\";\\n\\n/**\\n * @title The ChainlinkClient contract\\n * @notice Contract writers can inherit this contract in order to create requests for the\\n * Chainlink network\\n */\\nabstract contract ChainlinkClient {\\n  using Chainlink for Chainlink.Request;\\n\\n  uint256 internal constant LINK_DIVISIBILITY = 10**18;\\n  uint256 private constant AMOUNT_OVERRIDE = 0;\\n  address private constant SENDER_OVERRIDE = address(0);\\n  uint256 private constant ORACLE_ARGS_VERSION = 1;\\n  uint256 private constant OPERATOR_ARGS_VERSION = 2;\\n  bytes32 private constant ENS_TOKEN_SUBNAME = keccak256(\\\"link\\\");\\n  bytes32 private constant ENS_ORACLE_SUBNAME = keccak256(\\\"oracle\\\");\\n  address private constant LINK_TOKEN_POINTER = 0xC89bD4E1632D3A43CB03AAAd5262cbe4038Bc571;\\n\\n  ENSInterface private s_ens;\\n  bytes32 private s_ensNode;\\n  LinkTokenInterface private s_link;\\n  OperatorInterface private s_oracle;\\n  uint256 private s_requestCount = 1;\\n  mapping(bytes32 => address) private s_pendingRequests;\\n\\n  event ChainlinkRequested(bytes32 indexed id);\\n  event ChainlinkFulfilled(bytes32 indexed id);\\n  event ChainlinkCancelled(bytes32 indexed id);\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackAddr address to operate the callback on\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildChainlinkRequest(\\n    bytes32 specId,\\n    address callbackAddr,\\n    bytes4 callbackFunctionSignature\\n  ) internal pure returns (Chainlink.Request memory) {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, callbackAddr, callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a request that can hold additional parameters\\n   * @param specId The Job Specification ID that the request will be created for\\n   * @param callbackFunctionSignature function signature to use for the callback\\n   * @return A Chainlink Request struct in memory\\n   */\\n  function buildOperatorRequest(bytes32 specId, bytes4 callbackFunctionSignature)\\n    internal\\n    view\\n    returns (Chainlink.Request memory)\\n  {\\n    Chainlink.Request memory req;\\n    return req.initialize(specId, address(this), callbackFunctionSignature);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev Calls `chainlinkRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendChainlinkRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendChainlinkRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      ChainlinkRequestInterface.oracleRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      address(this),\\n      req.callbackFunctionId,\\n      nonce,\\n      ORACLE_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the stored oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Calls `sendOperatorRequestTo` with the stored oracle address\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequest(Chainlink.Request memory req, uint256 payment) internal returns (bytes32) {\\n    return sendOperatorRequestTo(address(s_oracle), req, payment);\\n  }\\n\\n  /**\\n   * @notice Creates a Chainlink request to the specified oracle address\\n   * @dev This function supports multi-word response\\n   * @dev Generates and stores a request ID, increments the local nonce, and uses `transferAndCall` to\\n   * send LINK which creates a request on the target oracle contract.\\n   * Emits ChainlinkRequested event.\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param req The initialized Chainlink Request\\n   * @param payment The amount of LINK to send for the request\\n   * @return requestId The request ID\\n   */\\n  function sendOperatorRequestTo(\\n    address oracleAddress,\\n    Chainlink.Request memory req,\\n    uint256 payment\\n  ) internal returns (bytes32 requestId) {\\n    uint256 nonce = s_requestCount;\\n    s_requestCount = nonce + 1;\\n    bytes memory encodedRequest = abi.encodeWithSelector(\\n      OperatorInterface.operatorRequest.selector,\\n      SENDER_OVERRIDE, // Sender value - overridden by onTokenTransfer by the requesting contract's address\\n      AMOUNT_OVERRIDE, // Amount value - overridden by onTokenTransfer by the actual amount of LINK sent\\n      req.id,\\n      req.callbackFunctionId,\\n      nonce,\\n      OPERATOR_ARGS_VERSION,\\n      req.buf.buf\\n    );\\n    return _rawRequest(oracleAddress, nonce, payment, encodedRequest);\\n  }\\n\\n  /**\\n   * @notice Make a request to an oracle\\n   * @param oracleAddress The address of the oracle for the request\\n   * @param nonce used to generate the request ID\\n   * @param payment The amount of LINK to send for the request\\n   * @param encodedRequest data encoded for request type specific format\\n   * @return requestId The request ID\\n   */\\n  function _rawRequest(\\n    address oracleAddress,\\n    uint256 nonce,\\n    uint256 payment,\\n    bytes memory encodedRequest\\n  ) private returns (bytes32 requestId) {\\n    requestId = keccak256(abi.encodePacked(this, nonce));\\n    s_pendingRequests[requestId] = oracleAddress;\\n    emit ChainlinkRequested(requestId);\\n    require(s_link.transferAndCall(oracleAddress, payment, encodedRequest), \\\"unable to transferAndCall to oracle\\\");\\n  }\\n\\n  /**\\n   * @notice Allows a request to be cancelled if it has not been fulfilled\\n   * @dev Requires keeping track of the expiration value emitted from the oracle contract.\\n   * Deletes the request from the `pendingRequests` mapping.\\n   * Emits ChainlinkCancelled event.\\n   * @param requestId The request ID\\n   * @param payment The amount of LINK sent for the request\\n   * @param callbackFunc The callback function specified for the request\\n   * @param expiration The time of the expiration for the request\\n   */\\n  function cancelChainlinkRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunc,\\n    uint256 expiration\\n  ) internal {\\n    OperatorInterface requested = OperatorInterface(s_pendingRequests[requestId]);\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkCancelled(requestId);\\n    requested.cancelOracleRequest(requestId, payment, callbackFunc, expiration);\\n  }\\n\\n  /**\\n   * @notice the next request count to be used in generating a nonce\\n   * @dev starts at 1 in order to ensure consistent gas cost\\n   * @return returns the next request count to be used in a nonce\\n   */\\n  function getNextRequestCount() internal view returns (uint256) {\\n    return s_requestCount;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle address\\n   * @param oracleAddress The address of the oracle contract\\n   */\\n  function setChainlinkOracle(address oracleAddress) internal {\\n    s_oracle = OperatorInterface(oracleAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the LINK token address\\n   * @param linkAddress The address of the LINK token contract\\n   */\\n  function setChainlinkToken(address linkAddress) internal {\\n    s_link = LinkTokenInterface(linkAddress);\\n  }\\n\\n  /**\\n   * @notice Sets the Chainlink token address for the public\\n   * network as given by the Pointer contract\\n   */\\n  function setPublicChainlinkToken() internal {\\n    setChainlinkToken(PointerInterface(LINK_TOKEN_POINTER).getAddress());\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the LINK token\\n   * @return The address of the LINK token\\n   */\\n  function chainlinkTokenAddress() internal view returns (address) {\\n    return address(s_link);\\n  }\\n\\n  /**\\n   * @notice Retrieves the stored address of the oracle contract\\n   * @return The address of the oracle contract\\n   */\\n  function chainlinkOracleAddress() internal view returns (address) {\\n    return address(s_oracle);\\n  }\\n\\n  /**\\n   * @notice Allows for a request which was created on another contract to be fulfilled\\n   * on this contract\\n   * @param oracleAddress The address of the oracle contract that will fulfill the request\\n   * @param requestId The request ID used for the response\\n   */\\n  function addChainlinkExternalRequest(address oracleAddress, bytes32 requestId) internal notPendingRequest(requestId) {\\n    s_pendingRequests[requestId] = oracleAddress;\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle and LINK token contracts with the addresses resolved by ENS\\n   * @dev Accounts for subnodes having different resolvers\\n   * @param ensAddress The address of the ENS contract\\n   * @param node The ENS node hash\\n   */\\n  function useChainlinkWithENS(address ensAddress, bytes32 node) internal {\\n    s_ens = ENSInterface(ensAddress);\\n    s_ensNode = node;\\n    bytes32 linkSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_TOKEN_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(linkSubnode));\\n    setChainlinkToken(resolver.addr(linkSubnode));\\n    updateChainlinkOracleWithENS();\\n  }\\n\\n  /**\\n   * @notice Sets the stored oracle contract with the address resolved by ENS\\n   * @dev This may be called on its own as long as `useChainlinkWithENS` has been called previously\\n   */\\n  function updateChainlinkOracleWithENS() internal {\\n    bytes32 oracleSubnode = keccak256(abi.encodePacked(s_ensNode, ENS_ORACLE_SUBNAME));\\n    ENSResolver_Chainlink resolver = ENSResolver_Chainlink(s_ens.resolver(oracleSubnode));\\n    setChainlinkOracle(resolver.addr(oracleSubnode));\\n  }\\n\\n  /**\\n   * @notice Ensures that the fulfillment is valid for this contract\\n   * @dev Use if the contract developer prefers methods instead of modifiers for validation\\n   * @param requestId The request ID for fulfillment\\n   */\\n  function validateChainlinkCallback(bytes32 requestId)\\n    internal\\n    recordChainlinkFulfillment(requestId)\\n  // solhint-disable-next-line no-empty-blocks\\n  {\\n\\n  }\\n\\n  /**\\n   * @dev Reverts if the sender is not the oracle of the request.\\n   * Emits ChainlinkFulfilled event.\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier recordChainlinkFulfillment(bytes32 requestId) {\\n    require(msg.sender == s_pendingRequests[requestId], \\\"Source must be the oracle of the request\\\");\\n    delete s_pendingRequests[requestId];\\n    emit ChainlinkFulfilled(requestId);\\n    _;\\n  }\\n\\n  /**\\n   * @dev Reverts if the request is already pending\\n   * @param requestId The request ID for fulfillment\\n   */\\n  modifier notPendingRequest(bytes32 requestId) {\\n    require(s_pendingRequests[requestId] == address(0), \\\"Request is already pending\\\");\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa221ccfa4763977cc78c57e3a83d47f5aaf7c15535a2c20dba5f46af80fb3bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./interfaces/OwnableInterface.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is OwnableInterface {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0xa2f137a1d066795aeac76226e58f33c982278cdd34b4f09e5a2243d5a0924654\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ChainlinkRequestInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ChainlinkRequestInterface {\\n  function oracleRequest(\\n    address sender,\\n    uint256 requestPrice,\\n    bytes32 serviceAgreementID,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function cancelOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration\\n  ) external;\\n}\\n\",\"keccak256\":\"0xa8adfbd0326c982c38ea3808a4da52f0a51807241787c4bd28235bbe86707c04\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/ENSInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface ENSInterface {\\n  // Logged when the owner of a node assigns a new owner to a subnode.\\n  event NewOwner(bytes32 indexed node, bytes32 indexed label, address owner);\\n\\n  // Logged when the owner of a node transfers ownership to a new account.\\n  event Transfer(bytes32 indexed node, address owner);\\n\\n  // Logged when the resolver for a node changes.\\n  event NewResolver(bytes32 indexed node, address resolver);\\n\\n  // Logged when the TTL of a node changes\\n  event NewTTL(bytes32 indexed node, uint64 ttl);\\n\\n  function setSubnodeOwner(\\n    bytes32 node,\\n    bytes32 label,\\n    address owner\\n  ) external;\\n\\n  function setResolver(bytes32 node, address resolver) external;\\n\\n  function setOwner(bytes32 node, address owner) external;\\n\\n  function setTTL(bytes32 node, uint64 ttl) external;\\n\\n  function owner(bytes32 node) external view returns (address);\\n\\n  function resolver(bytes32 node) external view returns (address);\\n\\n  function ttl(bytes32 node) external view returns (uint64);\\n}\\n\",\"keccak256\":\"0xe51365458d82233a55f5ad4492a3b6bf56332d21cad6b0a5f21b8a026fcfd6d0\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/LinkTokenInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface LinkTokenInterface {\\n  function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n  function approve(address spender, uint256 value) external returns (bool success);\\n\\n  function balanceOf(address owner) external view returns (uint256 balance);\\n\\n  function decimals() external view returns (uint8 decimalPlaces);\\n\\n  function decreaseApproval(address spender, uint256 addedValue) external returns (bool success);\\n\\n  function increaseApproval(address spender, uint256 subtractedValue) external;\\n\\n  function name() external view returns (string memory tokenName);\\n\\n  function symbol() external view returns (string memory tokenSymbol);\\n\\n  function totalSupply() external view returns (uint256 totalTokensIssued);\\n\\n  function transfer(address to, uint256 value) external returns (bool success);\\n\\n  function transferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function transferFrom(\\n    address from,\\n    address to,\\n    uint256 value\\n  ) external returns (bool success);\\n}\\n\",\"keccak256\":\"0xc7d7cd730d36825485ef4107d93c3ff18b9f3a5a00ea3d5988ba9a0bd70b10c5\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OperatorInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./OracleInterface.sol\\\";\\nimport \\\"./ChainlinkRequestInterface.sol\\\";\\n\\ninterface OperatorInterface is OracleInterface, ChainlinkRequestInterface {\\n  function operatorRequest(\\n    address sender,\\n    uint256 payment,\\n    bytes32 specId,\\n    bytes4 callbackFunctionId,\\n    uint256 nonce,\\n    uint256 dataVersion,\\n    bytes calldata data\\n  ) external;\\n\\n  function fulfillOracleRequest2(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes calldata data\\n  ) external returns (bool);\\n\\n  function ownerTransferAndCall(\\n    address to,\\n    uint256 value,\\n    bytes calldata data\\n  ) external returns (bool success);\\n\\n  function distributeFunds(address payable[] calldata receivers, uint256[] calldata amounts) external payable;\\n\\n  function getAuthorizedSenders() external returns (address[] memory);\\n\\n  function setAuthorizedSenders(address[] calldata senders) external;\\n\\n  function getForwarder() external returns (address);\\n}\\n\",\"keccak256\":\"0x79a7c77b8f87be6ef02a566765077ed599724b060a209f34f8907eec5615da68\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OracleInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OracleInterface {\\n  function fulfillOracleRequest(\\n    bytes32 requestId,\\n    uint256 payment,\\n    address callbackAddress,\\n    bytes4 callbackFunctionId,\\n    uint256 expiration,\\n    bytes32 data\\n  ) external returns (bool);\\n\\n  function isAuthorizedSender(address node) external view returns (bool);\\n\\n  function withdraw(address recipient, uint256 amount) external;\\n\\n  function withdrawable() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0x3a86242e005bad9daf1b4794399a81ba373069355f38c8a07b58e57abc32513a\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/OwnableInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface OwnableInterface {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0xb8b3a97783dddc198b790c4cec1eda7fb47aa38cbaea6555220d0ed8c735c086\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/PointerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface PointerInterface {\\n  function getAddress() external view returns (address);\\n}\\n\",\"keccak256\":\"0x42e5d62984f9d57bab7e32b2c6e3af86f4feb232ea2af6c822032fae88203bd7\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/BufferChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev A library for working with mutable byte buffers in Solidity.\\n *\\n * Byte buffers are mutable and expandable, and provide a variety of primitives\\n * for writing to them. At any time you can fetch a bytes object containing the\\n * current contents of the buffer. The bytes object should not be stored between\\n * operations, as it may change due to resizing of the buffer.\\n */\\nlibrary BufferChainlink {\\n  /**\\n   * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n   *      a capacity. The capacity may be longer than the current value, in\\n   *      which case it can be extended without the need to allocate more memory.\\n   */\\n  struct buffer {\\n    bytes buf;\\n    uint256 capacity;\\n  }\\n\\n  /**\\n   * @dev Initializes a buffer with an initial capacity.\\n   * @param buf The buffer to initialize.\\n   * @param capacity The number of bytes of space to allocate the buffer.\\n   * @return The buffer, for chaining.\\n   */\\n  function init(buffer memory buf, uint256 capacity) internal pure returns (buffer memory) {\\n    if (capacity % 32 != 0) {\\n      capacity += 32 - (capacity % 32);\\n    }\\n    // Allocate space for the buffer data\\n    buf.capacity = capacity;\\n    assembly {\\n      let ptr := mload(0x40)\\n      mstore(buf, ptr)\\n      mstore(ptr, 0)\\n      mstore(0x40, add(32, add(ptr, capacity)))\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Initializes a new buffer from an existing bytes object.\\n   *      Changes to the buffer may mutate the original value.\\n   * @param b The bytes object to initialize the buffer with.\\n   * @return A new buffer.\\n   */\\n  function fromBytes(bytes memory b) internal pure returns (buffer memory) {\\n    buffer memory buf;\\n    buf.buf = b;\\n    buf.capacity = b.length;\\n    return buf;\\n  }\\n\\n  function resize(buffer memory buf, uint256 capacity) private pure {\\n    bytes memory oldbuf = buf.buf;\\n    init(buf, capacity);\\n    append(buf, oldbuf);\\n  }\\n\\n  function max(uint256 a, uint256 b) private pure returns (uint256) {\\n    if (a > b) {\\n      return a;\\n    }\\n    return b;\\n  }\\n\\n  /**\\n   * @dev Sets buffer length to 0.\\n   * @param buf The buffer to truncate.\\n   * @return The original buffer, for chaining..\\n   */\\n  function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n    assembly {\\n      let bufptr := mload(buf)\\n      mstore(bufptr, 0)\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The start offset to write to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    require(len <= data.length);\\n\\n    if (off + len > buf.capacity) {\\n      resize(buf, max(buf.capacity, len + off) * 2);\\n    }\\n\\n    uint256 dest;\\n    uint256 src;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Start address = buffer address + offset + sizeof(buffer length)\\n      dest := add(add(bufptr, 32), off)\\n      // Update buffer length if we're extending it\\n      if gt(add(len, off), buflen) {\\n        mstore(bufptr, add(len, off))\\n      }\\n      src := add(data, 32)\\n    }\\n\\n    // Copy word-length chunks while possible\\n    for (; len >= 32; len -= 32) {\\n      assembly {\\n        mstore(dest, mload(src))\\n      }\\n      dest += 32;\\n      src += 32;\\n    }\\n\\n    // Copy remaining bytes\\n    unchecked {\\n      uint256 mask = (256**(32 - len)) - 1;\\n      assembly {\\n        let srcpart := and(mload(src), not(mask))\\n        let destpart := and(mload(dest), mask)\\n        mstore(dest, or(destpart, srcpart))\\n      }\\n    }\\n\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @param len The number of bytes to copy.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(\\n    buffer memory buf,\\n    bytes memory data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, len);\\n  }\\n\\n  /**\\n   * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, data.length);\\n  }\\n\\n  /**\\n   * @dev Writes a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write the byte at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeUint8(\\n    buffer memory buf,\\n    uint256 off,\\n    uint8 data\\n  ) internal pure returns (buffer memory) {\\n    if (off >= buf.capacity) {\\n      resize(buf, buf.capacity * 2);\\n    }\\n\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Length of existing buffer data\\n      let buflen := mload(bufptr)\\n      // Address = buffer address + sizeof(buffer length) + off\\n      let dest := add(add(bufptr, off), 32)\\n      mstore8(dest, data)\\n      // Update buffer length if we extended it\\n      if eq(off, buflen) {\\n        mstore(bufptr, add(buflen, 1))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendUint8(buffer memory buf, uint8 data) internal pure returns (buffer memory) {\\n    return writeUint8(buf, buf.buf.length, data);\\n  }\\n\\n  /**\\n   * @dev Writes up to 32 bytes to the buffer. Resizes if doing so would\\n   *      exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (left-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function write(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes32 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    unchecked {\\n      uint256 mask = (256**len) - 1;\\n      // Right-align data\\n      data = data >> (8 * (32 - len));\\n      assembly {\\n        // Memory address of the buffer data\\n        let bufptr := mload(buf)\\n        // Address = buffer address + sizeof(buffer length) + off + len\\n        let dest := add(add(bufptr, off), len)\\n        mstore(dest, or(and(mload(dest), not(mask)), data))\\n        // Update buffer length if we extended it\\n        if gt(add(off, len), mload(bufptr)) {\\n          mstore(bufptr, add(off, len))\\n        }\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Writes a bytes20 to the buffer. Resizes if doing so would exceed the\\n   *      capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeBytes20(\\n    buffer memory buf,\\n    uint256 off,\\n    bytes20 data\\n  ) internal pure returns (buffer memory) {\\n    return write(buf, off, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chhaining.\\n   */\\n  function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, bytes32(data), 20);\\n  }\\n\\n  /**\\n   * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer, for chaining.\\n   */\\n  function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n    return write(buf, buf.buf.length, data, 32);\\n  }\\n\\n  /**\\n   * @dev Writes an integer to the buffer. Resizes if doing so would exceed\\n   *      the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param off The offset to write at.\\n   * @param data The data to append.\\n   * @param len The number of bytes to write (right-aligned).\\n   * @return The original buffer, for chaining.\\n   */\\n  function writeInt(\\n    buffer memory buf,\\n    uint256 off,\\n    uint256 data,\\n    uint256 len\\n  ) private pure returns (buffer memory) {\\n    if (len + off > buf.capacity) {\\n      resize(buf, (len + off) * 2);\\n    }\\n\\n    uint256 mask = (256**len) - 1;\\n    assembly {\\n      // Memory address of the buffer data\\n      let bufptr := mload(buf)\\n      // Address = buffer address + off + sizeof(buffer length) + len\\n      let dest := add(add(bufptr, off), len)\\n      mstore(dest, or(and(mload(dest), not(mask)), data))\\n      // Update buffer length if we extended it\\n      if gt(add(off, len), mload(bufptr)) {\\n        mstore(bufptr, add(off, len))\\n      }\\n    }\\n    return buf;\\n  }\\n\\n  /**\\n   * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n   * exceed the capacity of the buffer.\\n   * @param buf The buffer to append to.\\n   * @param data The data to append.\\n   * @return The original buffer.\\n   */\\n  function appendInt(\\n    buffer memory buf,\\n    uint256 data,\\n    uint256 len\\n  ) internal pure returns (buffer memory) {\\n    return writeInt(buf, buf.buf.length, data, len);\\n  }\\n}\\n\",\"keccak256\":\"0x89388a631c16ad993e4d76d8d19e08ae98e1397f5dfdfb5f9c0b91015df4cf5d\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/CBORChainlink.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity >=0.4.19;\\n\\nimport {BufferChainlink} from \\\"./BufferChainlink.sol\\\";\\n\\nlibrary CBORChainlink {\\n  using BufferChainlink for BufferChainlink.buffer;\\n\\n  uint8 private constant MAJOR_TYPE_INT = 0;\\n  uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n  uint8 private constant MAJOR_TYPE_BYTES = 2;\\n  uint8 private constant MAJOR_TYPE_STRING = 3;\\n  uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n  uint8 private constant MAJOR_TYPE_MAP = 5;\\n  uint8 private constant MAJOR_TYPE_TAG = 6;\\n  uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n  uint8 private constant TAG_TYPE_BIGNUM = 2;\\n  uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n  function encodeFixedNumeric(BufferChainlink.buffer memory buf, uint8 major, uint64 value) private pure {\\n    if(value <= 23) {\\n      buf.appendUint8(uint8((major << 5) | value));\\n    } else if (value <= 0xFF) {\\n      buf.appendUint8(uint8((major << 5) | 24));\\n      buf.appendInt(value, 1);\\n    } else if (value <= 0xFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 25));\\n      buf.appendInt(value, 2);\\n    } else if (value <= 0xFFFFFFFF) {\\n      buf.appendUint8(uint8((major << 5) | 26));\\n      buf.appendInt(value, 4);\\n    } else {\\n      buf.appendUint8(uint8((major << 5) | 27));\\n      buf.appendInt(value, 8);\\n    }\\n  }\\n\\n  function encodeIndefiniteLengthType(BufferChainlink.buffer memory buf, uint8 major) private pure {\\n    buf.appendUint8(uint8((major << 5) | 31));\\n  }\\n\\n  function encodeUInt(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, value);\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n    }\\n  }\\n\\n  function encodeInt(BufferChainlink.buffer memory buf, int value) internal pure {\\n    if(value < -0x10000000000000000) {\\n      encodeSignedBigNum(buf, value);\\n    } else if(value > 0xFFFFFFFFFFFFFFFF) {\\n      encodeBigNum(buf, uint(value));\\n    } else if(value >= 0) {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(uint256(value)));\\n    } else {\\n      encodeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(uint256(-1 - value)));\\n    }\\n  }\\n\\n  function encodeBytes(BufferChainlink.buffer memory buf, bytes memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n    buf.append(value);\\n  }\\n\\n  function encodeBigNum(BufferChainlink.buffer memory buf, uint value) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n    encodeBytes(buf, abi.encode(value));\\n  }\\n\\n  function encodeSignedBigNum(BufferChainlink.buffer memory buf, int input) internal pure {\\n    buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM));\\n    encodeBytes(buf, abi.encode(uint256(-1 - input)));\\n  }\\n\\n  function encodeString(BufferChainlink.buffer memory buf, string memory value) internal pure {\\n    encodeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n    buf.append(bytes(value));\\n  }\\n\\n  function startArray(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n  }\\n\\n  function startMap(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n  }\\n\\n  function endSequence(BufferChainlink.buffer memory buf) internal pure {\\n    encodeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n  }\\n}\\n\",\"keccak256\":\"0x08bda450d4dc1d17147fd29810234d35e2c437f1a99be733cfa7ee516db08a48\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/ENSResolver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract ENSResolver {\\n  function addr(bytes32 node) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x606bda5f3fa27be4cf04f6636dda443b7787b56e87ade988fca2e51d2147613d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (access/AccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role);\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view virtual override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `_msgSender()` is missing `role`.\\n     * Overriding this function changes the behavior of the {onlyRole} modifier.\\n     *\\n     * Format of the revert message is described in {_checkRole}.\\n     *\\n     * _Available since v4.6._\\n     */\\n    function _checkRole(bytes32 role) internal view virtual {\\n        _checkRole(role, _msgSender());\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view virtual {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(account),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view virtual override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been revoked `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * May emit a {RoleGranted} event.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     *\\n     * NOTE: This function is deprecated in favor of {_grantRole}.\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleGranted} event.\\n     */\\n    function _grantRole(bytes32 role, address account) internal virtual {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * Internal function without access restriction.\\n     *\\n     * May emit a {RoleRevoked} event.\\n     */\\n    function _revokeRole(bytes32 role, address account) internal virtual {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x67e3daf189111d6d5b0464ed09cf9f0605a22c4b965a7fcecd707101faff008a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/IAccessControl.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0x59ce320a585d7e1f163cd70390a0ef2ff9cec832e2aa544293a00692465a7a57\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0xd10975de010d89fd1c78dc5e8a9a7e7f496198085c151648f20cba166b32582b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0;\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides functions for encoding/decoding base64\\nlibrary Base64 {\\n    string internal constant TABLE_ENCODE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n    bytes  internal constant TABLE_DECODE = hex\\\"0000000000000000000000000000000000000000000000000000000000000000\\\"\\n                                            hex\\\"00000000000000000000003e0000003f3435363738393a3b3c3d000000000000\\\"\\n                                            hex\\\"00000102030405060708090a0b0c0d0e0f101112131415161718190000000000\\\"\\n                                            hex\\\"001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000\\\";\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n\\n        // load the table into memory\\n        string memory table = TABLE_ENCODE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n                // read 3 bytes\\n                dataPtr := add(dataPtr, 3)\\n                let input := mload(dataPtr)\\n\\n                // write 4 characters\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(18, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr(12, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(shr( 6, input), 0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n                mstore8(resultPtr, mload(add(tablePtr, and(        input,  0x3F))))\\n                resultPtr := add(resultPtr, 1)\\n            }\\n\\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n\\n        return result;\\n    }\\n\\n    function decode(string memory _data) internal pure returns (bytes memory) {\\n        bytes memory data = bytes(_data);\\n\\n        if (data.length == 0) return new bytes(0);\\n        require(data.length % 4 == 0, \\\"invalid base64 decoder input\\\");\\n\\n        // load the table into memory\\n        bytes memory table = TABLE_DECODE;\\n\\n        // every 4 characters represent 3 bytes\\n        uint256 decodedLen = (data.length / 4) * 3;\\n\\n        // add some extra buffer at the end required for the writing\\n        bytes memory result = new bytes(decodedLen + 32);\\n\\n        assembly {\\n            // padding with '='\\n            let lastBytes := mload(add(data, mload(data)))\\n            if eq(and(lastBytes, 0xFF), 0x3d) {\\n                decodedLen := sub(decodedLen, 1)\\n                if eq(and(lastBytes, 0xFFFF), 0x3d3d) {\\n                    decodedLen := sub(decodedLen, 1)\\n                }\\n            }\\n\\n            // set the actual output length\\n            mstore(result, decodedLen)\\n\\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n\\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n\\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n\\n            // run over the input, 4 characters at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               // read 4 characters\\n               dataPtr := add(dataPtr, 4)\\n               let input := mload(dataPtr)\\n\\n               // write 3 bytes\\n               let output := add(\\n                   add(\\n                       shl(18, and(mload(add(tablePtr, and(shr(24, input), 0xFF))), 0xFF)),\\n                       shl(12, and(mload(add(tablePtr, and(shr(16, input), 0xFF))), 0xFF))),\\n                   add(\\n                       shl( 6, and(mload(add(tablePtr, and(shr( 8, input), 0xFF))), 0xFF)),\\n                               and(mload(add(tablePtr, and(        input , 0xFF))), 0xFF)\\n                    )\\n                )\\n                mstore(resultPtr, shl(232, output))\\n                resultPtr := add(resultPtr, 3)\\n            }\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xa73959e6ef0b693e4423a562e612370160b934a75e618361ddd8c9c4b8ddbaaf\",\"license\":\"MIT\"},\"contracts/PockyAPIConsumer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {Chainlink, ChainlinkClient, LinkTokenInterface} from '@chainlink/contracts/src/v0.8/ChainlinkClient.sol';\\nimport {ConfirmedOwner} from '@chainlink/contracts/src/v0.8/ConfirmedOwner.sol';\\nimport {Base64} from 'base64-sol/base64.sol';\\nimport {PockyCollections} from './PockyCollections.sol';\\n\\ncontract PockyAPIConsumer is ChainlinkClient, ConfirmedOwner {\\n  using Chainlink for Chainlink.Request;\\n\\n  /** @dev PockyCollections contract, which is a module responsible for managing the dNFT metadata */\\n  PockyCollections public collections;\\n\\n  mapping(bytes32 => uint256) public requestIdToCollectionId;\\n\\n  bytes32 private jobId;\\n  uint256 private fee;\\n\\n  constructor(PockyCollections _collections) ConfirmedOwner(msg.sender) {\\n    collections = _collections;\\n\\n    // Initialize Chainlink Oracle.\\n    // Address of Polygon Mumbai\\n    setChainlinkToken(0x326C977E6efc84E512bB9C30f76E30c160eD06FB);\\n    setChainlinkOracle(0x40193c8518BB267228Fc409a613bDbD8eC5a97b3);\\n    jobId = '7d80a6386ef543a3abb52817f6707e3b'; // GET>string job\\n    fee = 10 ** 16; // 0.01 LINK\\n  }\\n\\n  /**\\n   * Create a Chainlink request to retrieve ESPN API response.\\n   */\\n  function requestFetchMatchResult(uint256 collectionId) public returns (bytes32 requestId) {\\n    PockyCollections.Collection memory collection = collections.get(collectionId);\\n\\n    Chainlink.Request memory req = buildChainlinkRequest(jobId, address(this), this.fulfill.selector);\\n    req.add('get', string(abi.encodePacked('https://pocky.deno.dev/api/sport/nba/', collection.matchDate)));\\n    req.add('path', 'oracleResultAbiData');\\n\\n    requestId = sendChainlinkRequest(req, fee);\\n    requestIdToCollectionId[requestId] = collectionId;\\n    return requestId;\\n  }\\n\\n  /**\\n   * Receive the response from the Chainlink, and update the collection result.\\n   */\\n  function fulfill(\\n    bytes32 _requestId,\\n    string memory oracleResultAbiData\\n  ) public recordChainlinkFulfillment(_requestId) {\\n    updateEventResult(requestIdToCollectionId[_requestId], oracleResultAbiData);\\n  }\\n\\n  /**\\n   * Decodes the `oracleResultAbiData` from Pocky Sport API Proxy\\n   * as a `PockyCollections.OracleResult` struct, and update the collection result.\\n   *\\n   * @param collectionId The collection you want to update\\n   * @param oracleResultAbiData The result data from Pocky Sport API Proxy\\n   */\\n  function updateEventResult(uint256 collectionId, string memory oracleResultAbiData) public {\\n    bytes memory decodedAbiData = Base64.decode(oracleResultAbiData);\\n    PockyCollections.OracleResult memory result = abi.decode(\\n      decodedAbiData,\\n      (PockyCollections.OracleResult)\\n    );\\n    collections.updateResult(collectionId, result);\\n  }\\n\\n  /**\\n   * Allow withdraw of Link tokens from the contract\\n   */\\n  function withdrawLink() public onlyOwner {\\n    LinkTokenInterface link = LinkTokenInterface(chainlinkTokenAddress());\\n    require(link.transfer(msg.sender, link.balanceOf(address(this))), 'Unable to transfer');\\n  }\\n}\\n\",\"keccak256\":\"0x0b1eb9dcc24acbf67da058cf039f43bf27b8e27adbeec7939c1e4f891430e699\",\"license\":\"MIT\"},\"contracts/PockyCollections.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {AccessControl} from '@openzeppelin/contracts/access/AccessControl.sol';\\nimport {Base64} from 'base64-sol/base64.sol';\\nimport {TicketSVGRenderer} from './TicketSVGRenderer.sol';\\n\\n/**\\n * @dev A module manages the collection data (i.e. metadata shared across tickets for an event),\\n * and renders a OpenSea-compliant ERC721 metadata for each tokens.\\n * A metadata can be updated by Chainlink oracle (API Consumer), for example, for updating the event result.\\n *\\n * The frontend app should use it for serving available drops/collections.\\n */\\ncontract PockyCollections is AccessControl {\\n  /** @dev REGISTRAR_ROLE is admin user, who can register a collection. */\\n  bytes32 public constant REGISTRAR_ROLE = keccak256('REGISTRAR_ROLE');\\n\\n  /** @dev RESULT_ORACLE_ROLE is given to Chainlink Oracle, who can update the `eventResult` of a collection. */\\n  bytes32 public constant RESULT_ORACLE_ROLE = keccak256('RESULT_ORACLE_ROLE');\\n\\n  struct Collection {\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 basic information\\n    /** The event name. */\\n    string name;\\n    /** ticket price */\\n    uint256 priceInETH;\\n    /** the collection owner. only the owner can withdraw the revenue */\\n    address owner;\\n    /** the maximum count (mint cap) of tickets per a collection */\\n    uint256 maxSupply;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 date-related fields\\n    // NOTE: time-sensitive sections such as Now, Upcoming should be categorized in\\n    // the frontend by parsing startDate / endDate. Here are the cases:\\n    // - Now: startDate <= Date.now() < endDate\\n    // - Upcoming: Date.now() > startDate\\n    // - Past (hidden): Date.now() >= endDate\\n\\n    /** start date, in POSIX time (millis) */\\n    uint256 startDate;\\n    /** end date, in POSIX time (millis) */\\n    uint256 endDate;\\n    /** YYYYMMDD */\\n    string matchDate;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 metadata\\n\\n    TicketSVGMetadata ticketSvgMetadata;\\n    /** The summary of the location where the event held. shown in ticket image */\\n    string eventLocation;\\n    /** Multi-line description shown in the detail page */\\n    string description;\\n    /** Banner image URL. */\\n    string imageUrl;\\n    /** Should be listed in the top of the main page? */\\n    bool featured;\\n    // \\u2014\\u2014\\u2014\\u2014\\u2014\\u2014 result-related fields\\n    /** Whether the result is updated. */\\n    bool updated;\\n    /** The updated result (by Chainlink oracle) */\\n    OracleResult eventResult;\\n  }\\n\\n  struct TicketSVGMetadata {\\n    // home team info\\n    string homeTeamName;\\n    string homeTeamSymbol;\\n    string homeTeamLogo;\\n    string homeTeamColor;\\n    // away team info\\n    string awayTeamName;\\n    string awayTeamSymbol;\\n    string awayTeamLogo;\\n    string awayTeamColor;\\n    /** QR Code URL. `https://pocky.deno.dev/api/qrcode/${collectionId}` */\\n    string qrCodeUrl;\\n    /** Only the day of week, in uppercase. e.g. `\\\"WEDNESDAY,\\\"` */\\n    string dateLine1;\\n    /** rest of the date, in uppercase. e.g. `\\\"OCTOBER 20 PM 7:00\\\"` */\\n    string dateLine2;\\n    /** Only the first comma, in uppercase. e.g. `\\\"TD GARDEN,\\\"` */\\n    string locationLine1;\\n    /** rest of the date, in uppercase. e.g. `\\\"100 Legends Way, Boston, MA\\\"` */\\n    string locationLine2;\\n  }\\n\\n  struct OracleResult {\\n    string homeScore;\\n    string homeFGM;\\n    string homeFGP;\\n    string homeTPM;\\n    string homeTPP;\\n    string homeFTM;\\n    string homeFTP;\\n    string awayScore;\\n    string awayFGM;\\n    string awayFGP;\\n    string awayTPM;\\n    string awayTPP;\\n    string awayFTM;\\n    string awayFTP;\\n  }\\n\\n  Collection[] private _collections;\\n\\n  constructor() {\\n    _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n    _setupRole(REGISTRAR_ROLE, msg.sender);\\n    _setupRole(RESULT_ORACLE_ROLE, msg.sender);\\n  }\\n\\n  /**\\n   * @dev Registers a new collection. Should have {@link REGISTRAR_ROLE}.\\n   * @param collection The collection data.\\n   */\\n  function register(Collection calldata collection) external onlyRole(REGISTRAR_ROLE) {\\n    _collections.push(collection);\\n  }\\n\\n  /** @dev returns whether the collectionId exists. */\\n  function exists(uint256 collectionId) public view returns (bool) {\\n    return bytes(_collections[collectionId].name).length > 0;\\n  }\\n\\n  /** @dev returns the collection data for given ID. */\\n  function get(uint256 collectionId) external view returns (Collection memory) {\\n    require(exists(collectionId), 'collection does not exist');\\n    return _collections[collectionId];\\n  }\\n\\n  /**\\n   * @dev The entire collection data.\\n   * The frontend app should use this method for listing collections in the main page.\\n   */\\n  function list() external view returns (Collection[] memory) {\\n    return _collections;\\n  }\\n\\n  /**\\n   * @dev Updates a event result of a collection. Should have {@link RESULT_ORACLE_ROLE} (i.e. Oracle!)\\n   * @notice This function is called by Chainlink Oracle.\\n   * @param collectionId The collection you want to update\\n   * @param result The event result\\n   */\\n  function updateResult(uint256 collectionId, OracleResult calldata result) external onlyRole(RESULT_ORACLE_ROLE) {\\n    require(exists(collectionId), 'collection does not exist');\\n    _collections[collectionId].eventResult = result;\\n    _collections[collectionId].updated = true;\\n  }\\n\\n  /**\\n   * @dev Generates a OpenSea-compliant ERC721 metadata for a token.\\n   *\\n   * @param collectionId the collection ID\\n   */\\n  function constructTokenURIOf(uint256 collectionId) external view returns (string memory) {\\n    Collection storage collection = _collections[collectionId];\\n    string memory image = Base64.encode(bytes(TicketSVGRenderer.renderSVG(collection)));\\n    return\\n      string(\\n        abi.encodePacked(\\n          'data:application/json;base64,',\\n          Base64.encode(\\n            bytes(\\n              abi.encodePacked(\\n                '{\\\"name\\\":\\\"',\\n                collection.name,\\n                ' - Pocky dNFT Ticket\\\", \\\"description\\\":\\\"',\\n                collection.description,\\n                '\\\", \\\"animation_url\\\": \\\"https://pocky.deno.dev/render?svg=',\\n                image,\\n                '\\\"}'\\n              )\\n            )\\n          )\\n        )\\n      );\\n  }\\n\\n  function svgOf(uint256 collectionId) public view returns (string memory) {\\n    Collection storage collection = _collections[collectionId];\\n    return TicketSVGRenderer.renderSVG(collection);\\n  }\\n}\\n\",\"keccak256\":\"0xf8ae93e35b6dead8e2db0b09e19ed15d44f3e3af9d0cc4165c84f67c871cfc92\",\"license\":\"MIT\"},\"contracts/TicketSVGRenderer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\nimport {PockyCollections} from './PockyCollections.sol';\\nimport {Strings} from '@openzeppelin/contracts/utils/Strings.sol';\\n\\nlibrary TicketSVGRenderer {\\n  string public constant NBA_HEADER =\\n    '<svg width=\\\"848\\\" height=\\\"848\\\" viewBox=\\\"0 0 848 848\\\" fill=\\\"none\\\" xmlns=\\\"http://www.w3.org/2000/svg\\\" xmlns:xlink=\\\"http://www.w3.org/1999/xlink\\\"><defs><style>@font-face { font-family: \\\"NBA\\\"; src: url(\\\"https://static.duckee.xyz/NBA-Pacers.woff2\\\"); }.ta { font: bold 80px Arial; fill: white; letter-spacing: -0.03em; }.ta2 { font-size: 18px; fill: black; } .ta3 { font-size: 24px; fill: black; } .tn { font: 47px NBA, sans-serif; letter-spacing: -0.03em; fill: white; }.tn2 { fill: #828282; font-size: 24px; } .tn3 { fill: #646464; font-size: 24px; }</style><pattern id=\\\"nbalogo\\\" patternContentUnits=\\\"objectBoundingBox\\\" width=\\\"1\\\" height=\\\"1\\\"><use xlink:href=\\\"#inba\\\" transform=\\\"scale(0.0026178 0.00152439)\\\" /></pattern><clipPath id=\\\"cb\\\"><rect width=\\\"848\\\" height=\\\"848\\\" fill=\\\"white\\\" /></clipPath><image id=\\\"inba\\\" width=\\\"382\\\" height=\\\"656\\\" xlink:href=\\\"https://static.duckee.xyz/nba.png\\\" /></defs><g clip-path=\\\"url(#cb)\\\"><path d=\\\"M24 0H535C535 17.6731 549.327 32 567 32V816C549.327 816 535 830.327 535 848H24V0Z\\\" fill=\\\"#F3F3F3\\\" /><path d=\\\"M16 0.5L239.5 0.5L239.5 847.5H16C7.43959 847.5 0.5 840.56 0.5 832L0.5 16C0.5 7.43957 7.43959 0.5 16 0.5Z\\\" fill=\\\"black\\\" stroke=\\\"#F5F5F5\\\" /><rect x=\\\"24\\\" y=\\\"494\\\" width=\\\"191\\\" height=\\\"328\\\" fill=\\\"url(#nbalogo)\\\" /><path d=\\\"M567 35L567 813\\\" stroke=\\\"#CECECE\\\" stroke-width=\\\"3\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"40 40\\\" /><path d=\\\"M599 -0.000976562C599 17.6721 584.673 31.999 567 31.999V815.999C584.673 815.999 599 830.326 599 847.999H832C840.837 847.999 848 840.836 848 831.999V15.999C848 7.16247 840.837 -0.000976562 832 -0.000976562H599Z\\\" fill=\\\"#F5F5F5\\\" /><line x1=\\\"567\\\" y1=\\\"283.999\\\" x2=\\\"848\\\" y2=\\\"283.999\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"708\\\" cy=\\\"284.999\\\" r=\\\"56\\\" transform=\\\"rotate(-90 708 284.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"704\\\" cy=\\\"455.999\\\" r=\\\"50\\\" transform=\\\"rotate(-90 704 455.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M693.239 602.009L693.172 602H693.104H599L599 494C599 433.801 647.801 385 708 385C768.199 385 817 433.801 817 494V602H722.896H722.828L722.761 602.009C717.935 602.662 713.007 603 708 603C702.993 603 698.065 602.662 693.239 602.009Z\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M722.761 -32.009L722.828 -32L722.896 -32L817 -32L817 76C817 136.199 768.199 185 708 185C647.801 185 599 136.199 599 76L599 -32L693.104 -32L693.172 -32L693.239 -32.009C698.065 -32.6625 702.993 -33 708 -33C713.007 -33 717.935 -32.6625 722.761 -32.009Z\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><rect x=\\\"654\\\" y=\\\"601.999\\\" width=\\\"145\\\" height=\\\"100\\\" transform=\\\"rotate(-90 654 601.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><rect x=\\\"654\\\" y=\\\"118.999\\\" width=\\\"118\\\" height=\\\"100\\\" transform=\\\"rotate(-90 654 118.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><circle cx=\\\"704\\\" cy=\\\"113.999\\\" r=\\\"50\\\" transform=\\\"rotate(90 704 113.999)\\\" stroke=\\\"white\\\" stroke-width=\\\"2\\\" /><path d=\\\"M567 35L567 813\\\" stroke=\\\"#CECECE\\\" stroke-width=\\\"3\\\" stroke-linecap=\\\"round\\\" stroke-dasharray=\\\"40 40\\\" /><rect x=\\\"771\\\" width=\\\"46\\\" height=\\\"240\\\" fill=\\\"#E73325\\\" /><rect x=\\\"714\\\" width=\\\"46\\\" height=\\\"198\\\" fill=\\\"#E73325\\\"/><text transform=\\\"translate(718 189) rotate(-90)\\\" class=\\\"tn\\\"><tspan x=\\\"0.430511\\\" y=\\\"37.694\\\">2023 NBA</tspan></text><text transform=\\\"translate(775 231) rotate(-90)\\\" class=\\\"tn\\\"><tspan x=\\\"0.565628\\\" y=\\\"37.694\\\">GAME TICKET</tspan></text>';\\n  string public constant NBA_FOOTER = '</g></svg>';\\n\\n  function renderSVG(PockyCollections.Collection memory collection) public pure returns (string memory svg) {\\n    if (collection.updated) {\\n      return renderResultNbaTicket(collection);\\n    }\\n    return renderUpcomingNbaTicket(collection);\\n  }\\n\\n  function renderUpcomingNbaTicket(\\n    PockyCollections.Collection memory collection\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          NBA_HEADER,\\n          renderMatchScoreline(collection, 'Upcoming'),\\n          renderMatchInfo(collection),\\n          renderBackground(collection, false),\\n          NBA_FOOTER\\n        )\\n      );\\n  }\\n\\n  function renderResultNbaTicket(\\n    PockyCollections.Collection memory collection\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          NBA_HEADER,\\n          renderMatchScoreline(collection, 'Result'),\\n          renderMatchInfo(collection),\\n          renderBackground(collection, true),\\n          renderResultForm(56, collection.ticketSvgMetadata.homeTeamLogo, collection.ticketSvgMetadata.homeTeamName),\\n          renderResultForm(477, collection.ticketSvgMetadata.awayTeamLogo, collection.ticketSvgMetadata.awayTeamName),\\n          renderHomeStats(collection),\\n          renderAwayStats(collection),\\n          NBA_FOOTER\\n        )\\n      );\\n  }\\n\\n  function renderMatchScoreline(\\n    PockyCollections.Collection memory collection,\\n    string memory matchStatus\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(24 60)\\\" fill=\\\"#828282\\\" font-family=\\\"NBA\\\" font-size=\\\"36\\\">',\\n          matchStatus,\\n          '</text><text transform=\\\"translate(20 80)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.ticketSvgMetadata.homeTeamSymbol,\\n          '</tspan></text><text transform=\\\"translate(20 172)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.eventResult.homeScore,\\n          '</tspan></text><text transform=\\\"translate(20 284)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.ticketSvgMetadata.awayTeamSymbol,\\n          '</tspan></text><text transform=\\\"translate(20 376)\\\" class=\\\"ta\\\"><tspan x=\\\"0\\\" y=\\\"73.7344\\\">',\\n          collection.eventResult.awayScore,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderMatchInfo(PockyCollections.Collection memory collection) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(607 556) rotate(-90)\\\" class=\\\"tn tn2\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">DATE</tspan></text><text transform=\\\"translate(775.5 556) rotate(-90)\\\" class=\\\"ta ta2\\\"><tspan x=\\\"0\\\" y=\\\"16.7402\\\">',\\n          collection.ticketSvgMetadata.locationLine1,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"40\\\">',\\n          collection.ticketSvgMetadata.locationLine2,\\n          '</tspan></text><text transform=\\\"translate(743 556) rotate(-90)\\\" class=\\\"tn tn2\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">LOCATION</tspan></text><text transform=\\\"translate(639 556) rotate(-90)\\\" class=\\\"ta ta2\\\"><tspan x=\\\"0\\\" y=\\\"16.7402\\\">',\\n          collection.ticketSvgMetadata.dateLine1,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"40\\\">',\\n          collection.ticketSvgMetadata.dateLine2,\\n          '</tspan></text>',\\n          renderSquareImage('602', '592', '215', collection.ticketSvgMetadata.qrCodeUrl)\\n        )\\n      );\\n  }\\n\\n  function renderBackground(\\n    PockyCollections.Collection memory collection,\\n    bool transparent\\n  ) internal pure returns (string memory svg) {\\n    string memory images = string(\\n      abi.encodePacked(\\n        renderSquareImage('256', '66', '295', collection.ticketSvgMetadata.homeTeamLogo),\\n        renderSquareImage('256', '487', '295', collection.ticketSvgMetadata.awayTeamLogo)\\n      )\\n    );\\n    if (transparent) {\\n      return string(abi.encodePacked('<g opacity=\\\"0.07\\\">', images, '</g>'));\\n    }\\n    return images;\\n  }\\n\\n  function renderResultForm(\\n    uint256 baseY,\\n    string memory logo,\\n    string memory name\\n  ) internal pure returns (string memory svg) {\\n    string memory nameY = Strings.toString(baseY + 9);\\n    string memory headingY = Strings.toString(baseY + 72);\\n    return\\n      string(\\n        abi.encodePacked(\\n          renderSquareImage('264', Strings.toString(baseY), '48', logo),\\n          '<text transform=\\\"translate(324 ',\\n          nameY,\\n          ')\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"22.3203\\\">',\\n          name,\\n          '</tspan></text><text transform=\\\"translate(264 ',\\n          headingY,\\n          ')\\\" class=\\\"tn tn3\\\"><tspan x=\\\"0\\\" y=\\\"19.248\\\">FIELD GOALS MADE</tspan><tspan x=\\\"0\\\" y=\\\"61.248\\\">FIELD GOALS PCT</tspan><tspan x=\\\"0\\\" y=\\\"103.248\\\">3 POINTS MADE</tspan><tspan x=\\\"0\\\" y=\\\"145.248\\\">3 POINTS PCT</tspan><tspan x=\\\"0\\\" y=\\\"187.248\\\">FREE THROWS MADE</tspan><tspan x=\\\"0\\\" y=\\\"229.248\\\">FREE THROWS PCT</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderHomeStats(PockyCollections.Collection memory collection) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(453 126)\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"20\\\">',\\n          collection.eventResult.homeFGM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"62\\\">',\\n          collection.eventResult.homeFGP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"104\\\">',\\n          collection.eventResult.homeTPM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"146\\\">',\\n          collection.eventResult.homeTPP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"188\\\">',\\n          collection.eventResult.homeFTM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"230\\\">',\\n          collection.eventResult.homeFTP,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n    function renderAwayStats(PockyCollections.Collection memory collection) internal pure returns (string memory) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<text transform=\\\"translate(453 549)\\\" class=\\\"ta ta3\\\"><tspan x=\\\"0\\\" y=\\\"20\\\">',\\n          collection.eventResult.awayFGM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"62\\\">',\\n          collection.eventResult.awayFGP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"104\\\">',\\n          collection.eventResult.awayTPM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"146\\\">',\\n          collection.eventResult.awayTPP,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"188\\\">',\\n          collection.eventResult.awayFTM,\\n          '</tspan><tspan x=\\\"0\\\" y=\\\"230\\\">',\\n          collection.eventResult.awayFTP,\\n          '</tspan></text>'\\n        )\\n      );\\n  }\\n\\n  function renderSquareImage(\\n    string memory x,\\n    string memory y,\\n    string memory size,\\n    string memory href\\n  ) internal pure returns (string memory svg) {\\n    return\\n      string(\\n        abi.encodePacked(\\n          '<image x=\\\"',\\n          x,\\n          '\\\" y=\\\"',\\n          y,\\n          '\\\" width=\\\"',\\n          size,\\n          '\\\" height=\\\"',\\n          size,\\n          '\\\" preserveAspectRatio=\\\"xMidYMid slice\\\" href=\\\"',\\n          href,\\n          '\\\"/>'\\n        )\\n      );\\n  }\\n}\\n\",\"keccak256\":\"0x65f8a665b21a8b6e59def8813ce35702bdcd0f19db16fd11fd452f9bca2687ba\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260016004553480156200001657600080fd5b50604051620021423803806200214283398101604081905262000039916200020b565b3380600081620000905760405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f000000000000000060448201526064015b60405180910390fd5b600680546001600160a01b0319166001600160a01b0384811691909117909155811615620000c357620000c3816200015f565b5050600880546001600160a01b0384166001600160a01b0319918216179091556002805490911673326c977e6efc84e512bb9c30f76e30c160ed06fb17905550600380546001600160a01b0319167340193c8518bb267228fc409a613bdbd8ec5a97b3179055507f3764383061363338366566353433613361626235323831376636373037653362600a55662386f26fc10000600b556200023d565b336001600160a01b03821603620001b95760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c66000000000000000000604482015260640162000087565b600780546001600160a01b0319166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b6000602082840312156200021e57600080fd5b81516001600160a01b03811681146200023657600080fd5b9392505050565b611ef5806200024d6000396000f3fe608060405234801561001057600080fd5b50600436106100a35760003560e01c80638dc654a211610076578063dce496521161005b578063dce4965214610138578063e562dfd61461014b578063f2fde38b1461015e57600080fd5b80638dc654a214610102578063c8c3ab8f1461010a57600080fd5b80632960ddc3146100a857806337441996146100bd57806379ba5097146100d05780638da5cb5b146100d8575b600080fd5b6100bb6100b6366004611284565b610171565b005b6100bb6100cb366004611284565b610218565b6100bb610319565b6006546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100bb6103db565b61012a6101183660046112cb565b60096020526000908152604090205481565b6040519081526020016100f9565b61012a6101463660046112cb565b610543565b6008546100e5906001600160a01b031681565b6100bb61016c3660046112f9565b6106f7565b600061017c82610708565b905060008180602001905181019061019491906115be565b6008546040517fc79c5bec0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063c79c5bec906101e0908790859060040161161f565b600060405180830381600087803b1580156101fa57600080fd5b505af115801561020e573d6000803e3d6000fd5b5050505050505050565b60008281526005602052604090205482906001600160a01b031633146102ab5760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560448201527f207265717565737400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26000838152600960205260409020546103149083610171565b505050565b6007546001600160a01b031633146103735760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016102a2565b6006805473ffffffffffffffffffffffffffffffffffffffff19808216339081179093556007805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6103e36108ba565b60006103f76002546001600160a01b031690565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048591906117ce565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f491906117fc565b6105405760405162461bcd60e51b815260206004820152601260248201527f556e61626c6520746f207472616e73666572000000000000000000000000000060448201526064016102a2565b50565b6008546040517f9507d39a0000000000000000000000000000000000000000000000000000000081526004810183905260009182916001600160a01b0390911690639507d39a90602401600060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d29190810190611a1a565b905060006105ea600a5430633744199660e01b610916565b90506106526040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152508360c0015160405160200161063a9190611bc7565b60408051601f198184030181529190528391906109a7565b6106d16040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f6f7261636c65526573756c744162694461746100000000000000000000000000815250836109a79092919063ffffffff16565b6106dd81600b546109c5565b600081815260096020526040902094909455509192915050565b6106ff6108ba565b610540816109e8565b8051606090829060000361072c575050604080516000815260208101909152919050565b6004815161073a9190611c48565b156107875760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420626173653634206465636f64657220696e7075740000000060448201526064016102a2565b60006040518060a0016040528060808152602001611e406080913990506000600483516107b49190611c72565b6107bf906003611c86565b905060006107ce826020611c9d565b67ffffffffffffffff8111156107e6576107e6611171565b6040519080825280601f01601f191660200182016040528015610810576020820181803683370190505b5090508351840151603d60ff82160361083d57600183039250613d3d61ffff82160361083d576001830392505b50818152600183018485518101602084015b818310156108ac57600483019250825160ff8082168601511660ff808360081c168701511660061b0160ff808360101c1687015116600c1b60ff808460181c168801511660121b010190508060e81b82525060038101905061084f565b509298975050505050505050565b6006546001600160a01b031633146109145760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016102a2565b565b6109546040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b6109926040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61099e81868686610a9f565b95945050505050565b60808301516109b69083610b1b565b60808301516103149082610b1b565b6003546000906109df906001600160a01b03168484610b32565b90505b92915050565b336001600160a01b03821603610a405760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016102a2565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b610add6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b610aed8560800151610100610bf3565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b610b288260038351610c58565b6103148282610d6d565b600454600090610b43816001611c9d565b600455835160408086015160808701515191516000937f404299460000000000000000000000000000000000000000000000000000000093610b949386938493923092918a91600191602401611cb0565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091529050610be986838684610d94565b9695505050505050565b604080518082019091526060815260006020820152610c13602083611c48565b15610c3b57610c23602083611c48565b610c2e906020611d14565b610c389083611c9d565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610c8357610c7d8360e0600585901b168317610f32565b50505050565b60ff8167ffffffffffffffff1611610cc157610caa836018611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166001610f57565b61ffff8167ffffffffffffffff1611610d0057610ce9836019611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166002610f57565b63ffffffff8167ffffffffffffffff1611610d4157610d2a83601a611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166004610f57565b610d5683601b611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166008610f57565b6040805180820190915260608152600060208201526109df83846000015151848551610f7d565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f19018152828252805160209182012060008181526005909252918120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26002546040517f4000aea00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634000aea090610e7d90889087908790600401611d27565b6020604051808303816000875af1158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec091906117fc565b610b135760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c65000000000000000000000000000000000000000000000000000000000060648201526084016102a2565b6040805180820190915260608152600060208201526109df8384600001515184611067565b604080518082019091526060815260006020820152610b138485600001515185856110c2565b6040805180820190915260608152600060208201528251821115610fa057600080fd5b6020850151610faf8386611c9d565b1115610fe257610fe285610fd287602001518786610fcd9190611c9d565b611143565b610fdd906002611c86565b61115a565b6000808651805187602083010193508088870111156110015787860182525b505050602084015b602084106110415780518252611020602083611c9d565b915061102d602082611c9d565b905061103a602085611d14565b9350611009565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061109c5761109c8485602001516002610fdd9190611c86565b83518051602085830101848153508085036110b8576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516110e68584611c9d565b11156110fa576110fa85610fd28685611c9d565b6000600161110a84610100611e33565b6111149190611d14565b90508551838682010185831982511617815250805184870111156111385783860181525b509495945050505050565b6000818311156111545750816109e2565b50919050565b81516111668383610bf3565b50610c7d8382610d6d565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156111ab576111ab611171565b60405290565b6040516101a0810167ffffffffffffffff811182821017156111ab576111ab611171565b604051601f8201601f1916810167ffffffffffffffff811182821017156111fe576111fe611171565b604052919050565b600067ffffffffffffffff82111561122057611220611171565b50601f01601f191660200190565b600082601f83011261123f57600080fd5b813561125261124d82611206565b6111d5565b81815284602083860101111561126757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561129757600080fd5b82359150602083013567ffffffffffffffff8111156112b557600080fd5b6112c18582860161122e565b9150509250929050565b6000602082840312156112dd57600080fd5b5035919050565b6001600160a01b038116811461054057600080fd5b60006020828403121561130b57600080fd5b8135611316816112e4565b9392505050565b60005b83811015611338578181015183820152602001611320565b50506000910152565b600082601f83011261135257600080fd5b815161136061124d82611206565b81815284602083860101111561137557600080fd5b610b1382602083016020870161131d565b60006101c0828403121561139957600080fd5b6113a1611187565b9050815167ffffffffffffffff808211156113bb57600080fd5b6113c785838601611341565b835260208401519150808211156113dd57600080fd5b6113e985838601611341565b6020840152604084015191508082111561140257600080fd5b61140e85838601611341565b6040840152606084015191508082111561142757600080fd5b61143385838601611341565b6060840152608084015191508082111561144c57600080fd5b61145885838601611341565b608084015260a084015191508082111561147157600080fd5b61147d85838601611341565b60a084015260c084015191508082111561149657600080fd5b6114a285838601611341565b60c084015260e08401519150808211156114bb57600080fd5b6114c785838601611341565b60e0840152610100915081840151818111156114e257600080fd5b6114ee86828701611341565b83850152506101209150818401518181111561150957600080fd5b61151586828701611341565b83850152506101409150818401518181111561153057600080fd5b61153c86828701611341565b83850152506101609150818401518181111561155757600080fd5b61156386828701611341565b83850152506101809150818401518181111561157e57600080fd5b61158a86828701611341565b83850152506101a0915081840151818111156115a557600080fd5b6115b186828701611341565b8385015250505092915050565b6000602082840312156115d057600080fd5b815167ffffffffffffffff8111156115e757600080fd5b610b1384828501611386565b6000815180845261160b81602086016020860161131d565b601f01601f19169290920160200192915050565b82815260406020820152600082516101c08060408501526116446102008501836115f3565b91506020850151603f198086850301606087015261166284836115f3565b9350604087015191508086850301608087015261167f84836115f3565b935060608701519150808685030160a087015261169c84836115f3565b935060808701519150808685030160c08701526116b984836115f3565b935060a08701519150808685030160e08701526116d684836115f3565b935060c087015191506101008187860301818801526116f585846115f3565b945060e0880151925061012082888703018189015261171486856115f3565b9550818901519350610140915082888703018289015261173486856115f3565b95508089015193505061016082888703018189015261175386856115f3565b9550818901519350610180915082888703018289015261177386856115f3565b9550808901519350506101a082888703018189015261179286856115f3565b95508189015193508288870301858901526117ad86856115f3565b9550808901519450505080868503016101e08701525050610be982826115f3565b6000602082840312156117e057600080fd5b5051919050565b805180151581146117f757600080fd5b919050565b60006020828403121561180e57600080fd5b6109df826117e7565b80516117f7816112e4565b60006101a0828403121561183557600080fd5b61183d6111b1565b9050815167ffffffffffffffff8082111561185757600080fd5b61186385838601611341565b8352602084015191508082111561187957600080fd5b61188585838601611341565b6020840152604084015191508082111561189e57600080fd5b6118aa85838601611341565b604084015260608401519150808211156118c357600080fd5b6118cf85838601611341565b606084015260808401519150808211156118e857600080fd5b6118f485838601611341565b608084015260a084015191508082111561190d57600080fd5b61191985838601611341565b60a084015260c084015191508082111561193257600080fd5b61193e85838601611341565b60c084015260e084015191508082111561195757600080fd5b61196385838601611341565b60e08401526101009150818401518181111561197e57600080fd5b61198a86828701611341565b8385015250610120915081840151818111156119a557600080fd5b6119b186828701611341565b8385015250610140915081840151818111156119cc57600080fd5b6119d886828701611341565b8385015250610160915081840151818111156119f357600080fd5b6119ff86828701611341565b8385015250610180915081840151818111156115a557600080fd5b600060208284031215611a2c57600080fd5b815167ffffffffffffffff80821115611a4457600080fd5b908301906101c08286031215611a5957600080fd5b611a61611187565b825182811115611a7057600080fd5b611a7c87828601611341565b82525060208301516020820152611a9560408401611817565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115611aca57600080fd5b611ad687828601611341565b60c08301525060e083015182811115611aee57600080fd5b611afa87828601611822565b60e0830152506101008084015183811115611b1457600080fd5b611b2088828701611341565b8284015250506101208084015183811115611b3a57600080fd5b611b4688828701611341565b8284015250506101408084015183811115611b6057600080fd5b611b6c88828701611341565b828401525050610160611b808185016117e7565b90820152610180611b928482016117e7565b908201526101a08381015183811115611baa57600080fd5b611bb688828701611386565b918301919091525095945050505050565b7f68747470733a2f2f706f636b792e64656e6f2e6465762f6170692f73706f727481527f2f6e62612f000000000000000000000000000000000000000000000000000000602082015260008251611c2581602585016020870161131d565b9190910160250192915050565b634e487b7160e01b600052601260045260246000fd5b600082611c5757611c57611c32565b500690565b634e487b7160e01b600052601160045260246000fd5b600082611c8157611c81611c32565b500490565b80820281158282048414176109e2576109e2611c5c565b808201808211156109e2576109e2611c5c565b60006101006001600160a01b03808c1684528a60208501528960408501528089166060850152506001600160e01b0319871660808401528560a08401528460c08401528060e0840152611d05818401856115f3565b9b9a5050505050505050505050565b818103818111156109e2576109e2611c5c565b6001600160a01b038416815282602082015260606040820152600061099e60608301846115f3565b600181815b80851115611d8a578160001904821115611d7057611d70611c5c565b80851615611d7d57918102915b93841c9390800290611d54565b509250929050565b600082611da1575060016109e2565b81611dae575060006109e2565b8160018114611dc45760028114611dce57611dea565b60019150506109e2565b60ff841115611ddf57611ddf611c5c565b50506001821b6109e2565b5060208310610133831016604e8410600b8410161715611e0d575081810a6109e2565b611e178383611d4f565b8060001904821115611e2b57611e2b611c5c565b029392505050565b60006109df8383611d9256fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f101112131415161718190000000000001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000a2646970667358221220d94c377a38978f0e6a122296c1ad42345174de90bf00bce26a689c2874e7a32b64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100a35760003560e01c80638dc654a211610076578063dce496521161005b578063dce4965214610138578063e562dfd61461014b578063f2fde38b1461015e57600080fd5b80638dc654a214610102578063c8c3ab8f1461010a57600080fd5b80632960ddc3146100a857806337441996146100bd57806379ba5097146100d05780638da5cb5b146100d8575b600080fd5b6100bb6100b6366004611284565b610171565b005b6100bb6100cb366004611284565b610218565b6100bb610319565b6006546001600160a01b03165b6040516001600160a01b0390911681526020015b60405180910390f35b6100bb6103db565b61012a6101183660046112cb565b60096020526000908152604090205481565b6040519081526020016100f9565b61012a6101463660046112cb565b610543565b6008546100e5906001600160a01b031681565b6100bb61016c3660046112f9565b6106f7565b600061017c82610708565b905060008180602001905181019061019491906115be565b6008546040517fc79c5bec0000000000000000000000000000000000000000000000000000000081529192506001600160a01b03169063c79c5bec906101e0908790859060040161161f565b600060405180830381600087803b1580156101fa57600080fd5b505af115801561020e573d6000803e3d6000fd5b5050505050505050565b60008281526005602052604090205482906001600160a01b031633146102ab5760405162461bcd60e51b815260206004820152602860248201527f536f75726365206d75737420626520746865206f7261636c65206f662074686560448201527f207265717565737400000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b600081815260056020526040808220805473ffffffffffffffffffffffffffffffffffffffff191690555182917f7cc135e0cebb02c3480ae5d74d377283180a2601f8f644edf7987b009316c63a91a26000838152600960205260409020546103149083610171565b505050565b6007546001600160a01b031633146103735760405162461bcd60e51b815260206004820152601660248201527f4d7573742062652070726f706f736564206f776e65720000000000000000000060448201526064016102a2565b6006805473ffffffffffffffffffffffffffffffffffffffff19808216339081179093556007805490911690556040516001600160a01b03909116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a350565b6103e36108ba565b60006103f76002546001600160a01b031690565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201529091506001600160a01b0382169063a9059cbb90339083906370a0823190602401602060405180830381865afa158015610461573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061048591906117ce565b6040516001600160e01b031960e085901b1681526001600160a01b03909216600483015260248201526044016020604051808303816000875af11580156104d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104f491906117fc565b6105405760405162461bcd60e51b815260206004820152601260248201527f556e61626c6520746f207472616e73666572000000000000000000000000000060448201526064016102a2565b50565b6008546040517f9507d39a0000000000000000000000000000000000000000000000000000000081526004810183905260009182916001600160a01b0390911690639507d39a90602401600060405180830381865afa1580156105aa573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526105d29190810190611a1a565b905060006105ea600a5430633744199660e01b610916565b90506106526040518060400160405280600381526020017f67657400000000000000000000000000000000000000000000000000000000008152508360c0015160405160200161063a9190611bc7565b60408051601f198184030181529190528391906109a7565b6106d16040518060400160405280600481526020017f70617468000000000000000000000000000000000000000000000000000000008152506040518060400160405280601381526020017f6f7261636c65526573756c744162694461746100000000000000000000000000815250836109a79092919063ffffffff16565b6106dd81600b546109c5565b600081815260096020526040902094909455509192915050565b6106ff6108ba565b610540816109e8565b8051606090829060000361072c575050604080516000815260208101909152919050565b6004815161073a9190611c48565b156107875760405162461bcd60e51b815260206004820152601c60248201527f696e76616c696420626173653634206465636f64657220696e7075740000000060448201526064016102a2565b60006040518060a0016040528060808152602001611e406080913990506000600483516107b49190611c72565b6107bf906003611c86565b905060006107ce826020611c9d565b67ffffffffffffffff8111156107e6576107e6611171565b6040519080825280601f01601f191660200182016040528015610810576020820181803683370190505b5090508351840151603d60ff82160361083d57600183039250613d3d61ffff82160361083d576001830392505b50818152600183018485518101602084015b818310156108ac57600483019250825160ff8082168601511660ff808360081c168701511660061b0160ff808360101c1687015116600c1b60ff808460181c168801511660121b010190508060e81b82525060038101905061084f565b509298975050505050505050565b6006546001600160a01b031633146109145760405162461bcd60e51b815260206004820152601660248201527f4f6e6c792063616c6c61626c65206279206f776e65720000000000000000000060448201526064016102a2565b565b6109546040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b6109926040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b61099e81868686610a9f565b95945050505050565b60808301516109b69083610b1b565b60808301516103149082610b1b565b6003546000906109df906001600160a01b03168484610b32565b90505b92915050565b336001600160a01b03821603610a405760405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c6600000000000000000060448201526064016102a2565b6007805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b03838116918217909255600654604051919216907fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae127890600090a350565b610add6040805160a0810182526000808252602080830182905282840182905260608084018390528451808601909552845283015290608082015290565b610aed8560800151610100610bf3565b50508284526001600160a01b03821660208501526001600160e01b031981166040850152835b949350505050565b610b288260038351610c58565b6103148282610d6d565b600454600090610b43816001611c9d565b600455835160408086015160808701515191516000937f404299460000000000000000000000000000000000000000000000000000000093610b949386938493923092918a91600191602401611cb0565b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b0319909316929092179091529050610be986838684610d94565b9695505050505050565b604080518082019091526060815260006020820152610c13602083611c48565b15610c3b57610c23602083611c48565b610c2e906020611d14565b610c389083611c9d565b91505b506020828101829052604080518085526000815290920101905290565b60178167ffffffffffffffff1611610c8357610c7d8360e0600585901b168317610f32565b50505050565b60ff8167ffffffffffffffff1611610cc157610caa836018611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166001610f57565b61ffff8167ffffffffffffffff1611610d0057610ce9836019611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166002610f57565b63ffffffff8167ffffffffffffffff1611610d4157610d2a83601a611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166004610f57565b610d5683601b611fe0600586901b1617610f32565b50610c7d8367ffffffffffffffff83166008610f57565b6040805180820190915260608152600060208201526109df83846000015151848551610f7d565b6040516bffffffffffffffffffffffff193060601b1660208201526034810184905260009060540160408051808303601f19018152828252805160209182012060008181526005909252918120805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b038a1617905590925082917fb5e6e01e79f91267dc17b4e6314d5d4d03593d2ceee0fbb452b750bd70ea5af99190a26002546040517f4000aea00000000000000000000000000000000000000000000000000000000081526001600160a01b0390911690634000aea090610e7d90889087908790600401611d27565b6020604051808303816000875af1158015610e9c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec091906117fc565b610b135760405162461bcd60e51b815260206004820152602360248201527f756e61626c6520746f207472616e73666572416e6443616c6c20746f206f726160448201527f636c65000000000000000000000000000000000000000000000000000000000060648201526084016102a2565b6040805180820190915260608152600060208201526109df8384600001515184611067565b604080518082019091526060815260006020820152610b138485600001515185856110c2565b6040805180820190915260608152600060208201528251821115610fa057600080fd5b6020850151610faf8386611c9d565b1115610fe257610fe285610fd287602001518786610fcd9190611c9d565b611143565b610fdd906002611c86565b61115a565b6000808651805187602083010193508088870111156110015787860182525b505050602084015b602084106110415780518252611020602083611c9d565b915061102d602082611c9d565b905061103a602085611d14565b9350611009565b51815160001960208690036101000a019081169019919091161790525083949350505050565b6040805180820190915260608152600060208201528360200151831061109c5761109c8485602001516002610fdd9190611c86565b83518051602085830101848153508085036110b8576001810182525b5093949350505050565b60408051808201909152606081526000602082015260208501516110e68584611c9d565b11156110fa576110fa85610fd28685611c9d565b6000600161110a84610100611e33565b6111149190611d14565b90508551838682010185831982511617815250805184870111156111385783860181525b509495945050505050565b6000818311156111545750816109e2565b50919050565b81516111668383610bf3565b50610c7d8382610d6d565b634e487b7160e01b600052604160045260246000fd5b6040516101c0810167ffffffffffffffff811182821017156111ab576111ab611171565b60405290565b6040516101a0810167ffffffffffffffff811182821017156111ab576111ab611171565b604051601f8201601f1916810167ffffffffffffffff811182821017156111fe576111fe611171565b604052919050565b600067ffffffffffffffff82111561122057611220611171565b50601f01601f191660200190565b600082601f83011261123f57600080fd5b813561125261124d82611206565b6111d5565b81815284602083860101111561126757600080fd5b816020850160208301376000918101602001919091529392505050565b6000806040838503121561129757600080fd5b82359150602083013567ffffffffffffffff8111156112b557600080fd5b6112c18582860161122e565b9150509250929050565b6000602082840312156112dd57600080fd5b5035919050565b6001600160a01b038116811461054057600080fd5b60006020828403121561130b57600080fd5b8135611316816112e4565b9392505050565b60005b83811015611338578181015183820152602001611320565b50506000910152565b600082601f83011261135257600080fd5b815161136061124d82611206565b81815284602083860101111561137557600080fd5b610b1382602083016020870161131d565b60006101c0828403121561139957600080fd5b6113a1611187565b9050815167ffffffffffffffff808211156113bb57600080fd5b6113c785838601611341565b835260208401519150808211156113dd57600080fd5b6113e985838601611341565b6020840152604084015191508082111561140257600080fd5b61140e85838601611341565b6040840152606084015191508082111561142757600080fd5b61143385838601611341565b6060840152608084015191508082111561144c57600080fd5b61145885838601611341565b608084015260a084015191508082111561147157600080fd5b61147d85838601611341565b60a084015260c084015191508082111561149657600080fd5b6114a285838601611341565b60c084015260e08401519150808211156114bb57600080fd5b6114c785838601611341565b60e0840152610100915081840151818111156114e257600080fd5b6114ee86828701611341565b83850152506101209150818401518181111561150957600080fd5b61151586828701611341565b83850152506101409150818401518181111561153057600080fd5b61153c86828701611341565b83850152506101609150818401518181111561155757600080fd5b61156386828701611341565b83850152506101809150818401518181111561157e57600080fd5b61158a86828701611341565b83850152506101a0915081840151818111156115a557600080fd5b6115b186828701611341565b8385015250505092915050565b6000602082840312156115d057600080fd5b815167ffffffffffffffff8111156115e757600080fd5b610b1384828501611386565b6000815180845261160b81602086016020860161131d565b601f01601f19169290920160200192915050565b82815260406020820152600082516101c08060408501526116446102008501836115f3565b91506020850151603f198086850301606087015261166284836115f3565b9350604087015191508086850301608087015261167f84836115f3565b935060608701519150808685030160a087015261169c84836115f3565b935060808701519150808685030160c08701526116b984836115f3565b935060a08701519150808685030160e08701526116d684836115f3565b935060c087015191506101008187860301818801526116f585846115f3565b945060e0880151925061012082888703018189015261171486856115f3565b9550818901519350610140915082888703018289015261173486856115f3565b95508089015193505061016082888703018189015261175386856115f3565b9550818901519350610180915082888703018289015261177386856115f3565b9550808901519350506101a082888703018189015261179286856115f3565b95508189015193508288870301858901526117ad86856115f3565b9550808901519450505080868503016101e08701525050610be982826115f3565b6000602082840312156117e057600080fd5b5051919050565b805180151581146117f757600080fd5b919050565b60006020828403121561180e57600080fd5b6109df826117e7565b80516117f7816112e4565b60006101a0828403121561183557600080fd5b61183d6111b1565b9050815167ffffffffffffffff8082111561185757600080fd5b61186385838601611341565b8352602084015191508082111561187957600080fd5b61188585838601611341565b6020840152604084015191508082111561189e57600080fd5b6118aa85838601611341565b604084015260608401519150808211156118c357600080fd5b6118cf85838601611341565b606084015260808401519150808211156118e857600080fd5b6118f485838601611341565b608084015260a084015191508082111561190d57600080fd5b61191985838601611341565b60a084015260c084015191508082111561193257600080fd5b61193e85838601611341565b60c084015260e084015191508082111561195757600080fd5b61196385838601611341565b60e08401526101009150818401518181111561197e57600080fd5b61198a86828701611341565b8385015250610120915081840151818111156119a557600080fd5b6119b186828701611341565b8385015250610140915081840151818111156119cc57600080fd5b6119d886828701611341565b8385015250610160915081840151818111156119f357600080fd5b6119ff86828701611341565b8385015250610180915081840151818111156115a557600080fd5b600060208284031215611a2c57600080fd5b815167ffffffffffffffff80821115611a4457600080fd5b908301906101c08286031215611a5957600080fd5b611a61611187565b825182811115611a7057600080fd5b611a7c87828601611341565b82525060208301516020820152611a9560408401611817565b6040820152606083015160608201526080830151608082015260a083015160a082015260c083015182811115611aca57600080fd5b611ad687828601611341565b60c08301525060e083015182811115611aee57600080fd5b611afa87828601611822565b60e0830152506101008084015183811115611b1457600080fd5b611b2088828701611341565b8284015250506101208084015183811115611b3a57600080fd5b611b4688828701611341565b8284015250506101408084015183811115611b6057600080fd5b611b6c88828701611341565b828401525050610160611b808185016117e7565b90820152610180611b928482016117e7565b908201526101a08381015183811115611baa57600080fd5b611bb688828701611386565b918301919091525095945050505050565b7f68747470733a2f2f706f636b792e64656e6f2e6465762f6170692f73706f727481527f2f6e62612f000000000000000000000000000000000000000000000000000000602082015260008251611c2581602585016020870161131d565b9190910160250192915050565b634e487b7160e01b600052601260045260246000fd5b600082611c5757611c57611c32565b500690565b634e487b7160e01b600052601160045260246000fd5b600082611c8157611c81611c32565b500490565b80820281158282048414176109e2576109e2611c5c565b808201808211156109e2576109e2611c5c565b60006101006001600160a01b03808c1684528a60208501528960408501528089166060850152506001600160e01b0319871660808401528560a08401528460c08401528060e0840152611d05818401856115f3565b9b9a5050505050505050505050565b818103818111156109e2576109e2611c5c565b6001600160a01b038416815282602082015260606040820152600061099e60608301846115f3565b600181815b80851115611d8a578160001904821115611d7057611d70611c5c565b80851615611d7d57918102915b93841c9390800290611d54565b509250929050565b600082611da1575060016109e2565b81611dae575060006109e2565b8160018114611dc45760028114611dce57611dea565b60019150506109e2565b60ff841115611ddf57611ddf611c5c565b50506001821b6109e2565b5060208310610133831016604e8410600b8410161715611e0d575081810a6109e2565b611e178383611d4f565b8060001904821115611e2b57611e2b611c5c565b029392505050565b60006109df8383611d9256fe000000000000000000000000000000000000000000000000000000000000000000000000000000000000003e0000003f3435363738393a3b3c3d00000000000000000102030405060708090a0b0c0d0e0f101112131415161718190000000000001a1b1c1d1e1f202122232425262728292a2b2c2d2e2f303132330000000000a2646970667358221220d94c377a38978f0e6a122296c1ad42345174de90bf00bce26a689c2874e7a32b64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "updateEventResult(uint256,string)": {
        "params": {
          "collectionId": "The collection you want to update",
          "oracleResultAbiData": "The result data from Pocky Sport API Proxy"
        }
      }
    },
    "stateVariables": {
      "collections": {
        "details": "PockyCollections contract, which is a module responsible for managing the dNFT metadata "
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "acceptOwnership()": {
        "notice": "Allows an ownership transfer to be completed by the recipient."
      },
      "fulfill(bytes32,string)": {
        "notice": "Receive the response from the Chainlink, and update the collection result."
      },
      "owner()": {
        "notice": "Get the current owner"
      },
      "requestFetchMatchResult(uint256)": {
        "notice": "Create a Chainlink request to retrieve ESPN API response."
      },
      "transferOwnership(address)": {
        "notice": "Allows an owner to begin transferring ownership to a new address, pending."
      },
      "updateEventResult(uint256,string)": {
        "notice": "Decodes the `oracleResultAbiData` from Pocky Sport API Proxy as a `PockyCollections.OracleResult` struct, and update the collection result."
      },
      "withdrawLink()": {
        "notice": "Allow withdraw of Link tokens from the contract"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 319,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_ens",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(ENSInterface)1156"
      },
      {
        "astId": 321,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_ensNode",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      },
      {
        "astId": 324,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_link",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(LinkTokenInterface)1251"
      },
      {
        "astId": 327,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_oracle",
        "offset": 0,
        "slot": "3",
        "type": "t_contract(OperatorInterface)1331"
      },
      {
        "astId": 330,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_requestCount",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 334,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_pendingRequests",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_bytes32,t_address)"
      },
      {
        "astId": 889,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_owner",
        "offset": 0,
        "slot": "6",
        "type": "t_address"
      },
      {
        "astId": 891,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "s_pendingOwner",
        "offset": 0,
        "slot": "7",
        "type": "t_address"
      },
      {
        "astId": 3999,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "collections",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(PockyCollections)4532"
      },
      {
        "astId": 4003,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "requestIdToCollectionId",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_bytes32,t_uint256)"
      },
      {
        "astId": 4005,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "jobId",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 4007,
        "contract": "contracts/PockyAPIConsumer.sol:PockyAPIConsumer",
        "label": "fee",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_contract(ENSInterface)1156": {
        "encoding": "inplace",
        "label": "contract ENSInterface",
        "numberOfBytes": "20"
      },
      "t_contract(LinkTokenInterface)1251": {
        "encoding": "inplace",
        "label": "contract LinkTokenInterface",
        "numberOfBytes": "20"
      },
      "t_contract(OperatorInterface)1331": {
        "encoding": "inplace",
        "label": "contract OperatorInterface",
        "numberOfBytes": "20"
      },
      "t_contract(PockyCollections)4532": {
        "encoding": "inplace",
        "label": "contract PockyCollections",
        "numberOfBytes": "20"
      },
      "t_mapping(t_bytes32,t_address)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}